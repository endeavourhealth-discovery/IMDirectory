// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';
import ECLListener from './ECLListener.js';
import ECLVisitor from './ECLVisitor.js';

const serializedATN = [4,1,99,900,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,169,8,1,1,1,1,1,1,2,
1,2,3,2,175,8,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,3,3,185,8,3,1,4,1,4,3,4,
189,8,4,1,4,1,4,1,4,1,4,1,4,3,4,196,8,4,4,4,198,8,4,11,4,12,4,199,1,5,1,
5,3,5,204,8,5,1,5,1,5,1,5,1,5,1,5,3,5,211,8,5,4,5,213,8,5,11,5,12,5,214,
1,6,1,6,3,6,219,8,6,1,6,1,6,1,6,1,6,1,6,3,6,226,8,6,1,7,1,7,1,7,1,7,1,7,
3,7,233,8,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,4,8,242,8,8,11,8,12,8,243,1,9,1,
9,1,9,1,9,1,10,1,10,1,10,3,10,253,8,10,1,10,1,10,1,10,3,10,258,8,10,1,10,
1,10,1,11,1,11,3,11,264,8,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,3,14,278,8,14,1,15,1,15,1,16,4,16,283,8,16,11,16,12,16,284,
1,16,4,16,288,8,16,11,16,12,16,289,1,16,4,16,293,8,16,11,16,12,16,294,5,
16,297,8,16,10,16,12,16,300,9,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
3,18,310,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,3,19,325,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,347,8,20,1,21,1,21,1,21,
1,21,1,21,1,21,1,21,1,21,1,21,3,21,358,8,21,1,22,1,22,1,22,1,22,1,22,1,22,
1,22,1,22,1,22,1,22,1,22,3,22,371,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,391,8,23,1,24,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,403,8,24,1,25,1,25,1,25,
1,25,1,25,3,25,410,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,
1,27,1,28,1,28,3,28,425,8,28,1,29,1,29,3,29,429,8,29,1,30,1,30,3,30,433,
8,30,1,30,1,30,1,30,1,30,1,30,3,30,440,8,30,4,30,442,8,30,11,30,12,30,443,
1,31,1,31,3,31,448,8,31,1,31,1,31,1,31,1,31,1,31,3,31,455,8,31,4,31,457,
8,31,11,31,12,31,458,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,3,
33,471,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,3,35,481,8,35,1,36,1,
36,3,36,485,8,36,1,36,1,36,1,36,1,36,1,36,3,36,492,8,36,4,36,494,8,36,11,
36,12,36,495,1,37,1,37,3,37,500,8,37,1,37,1,37,1,37,1,37,1,37,3,37,507,8,
37,4,37,509,8,37,11,37,12,37,510,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,
3,39,521,8,39,1,40,1,40,1,40,3,40,526,8,40,1,40,1,40,1,40,1,40,3,40,532,
8,40,1,40,1,40,1,40,1,41,1,41,1,41,3,41,540,8,41,1,41,1,41,1,41,3,41,545,
8,41,1,41,1,41,1,41,1,41,1,41,3,41,552,8,41,1,42,1,42,1,42,1,42,1,42,1,42,
1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,3,44,569,8,44,1,45,1,45,1,45,
1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,586,8,47,
1,48,1,48,3,48,590,8,48,1,49,1,49,1,49,1,49,1,49,3,49,597,8,49,1,50,1,50,
1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,610,8,50,1,51,1,51,1,51,
1,51,1,51,1,51,1,51,1,51,1,51,3,51,621,8,51,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,638,8,52,1,53,1,53,1,53,
1,53,1,53,1,53,1,53,1,53,1,53,3,53,649,8,53,1,54,3,54,652,8,54,1,54,1,54,
3,54,656,8,54,1,55,1,55,4,55,660,8,55,11,55,12,55,661,1,56,1,56,5,56,666,
8,56,10,56,12,56,669,9,56,1,56,3,56,672,8,56,1,57,1,57,1,57,4,57,677,8,57,
11,57,12,57,678,1,58,1,58,5,58,683,8,58,10,58,12,58,686,9,58,1,58,3,58,689,
8,58,1,59,1,59,1,59,1,59,1,59,4,59,696,8,59,11,59,12,59,697,1,59,1,59,1,
59,1,59,1,59,1,59,1,59,3,59,707,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,797,8,59,3,59,799,8,59,1,
60,1,60,1,60,1,60,1,60,5,60,806,8,60,10,60,12,60,809,9,60,1,61,1,61,1,61,
1,61,1,61,4,61,816,8,61,11,61,12,61,817,1,62,1,62,1,62,1,62,1,62,5,62,825,
8,62,10,62,12,62,828,9,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,
63,3,63,840,8,63,1,64,1,64,1,64,3,64,845,8,64,1,65,1,65,1,65,1,66,1,66,1,
66,1,66,1,66,1,66,1,66,3,66,857,8,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,
1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,76,3,
76,880,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,890,8,77,1,78,1,
78,1,78,1,78,1,78,1,78,3,78,898,8,78,1,78,0,0,79,0,2,4,6,8,10,12,14,16,18,
20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,0,31,2,0,41,41,73,73,2,0,42,42,74,74,2,0,56,56,88,88,
2,0,40,40,72,72,2,0,51,51,83,83,2,0,38,38,70,70,2,0,57,57,89,89,2,0,52,52,
84,84,2,0,43,43,75,75,2,0,55,55,87,87,2,0,49,49,81,81,2,0,45,45,77,77,2,
0,46,46,78,78,2,0,53,53,85,85,2,0,50,50,82,82,2,0,58,58,90,90,2,0,62,62,
94,94,2,0,59,59,91,91,2,0,16,16,18,18,1,0,6,14,1,0,16,99,1,0,8,14,1,0,6,
19,1,0,21,99,1,0,21,30,1,0,22,30,1,0,6,96,1,0,98,99,1,0,5,6,1,0,8,64,1,0,
66,99,956,0,158,1,0,0,0,2,163,1,0,0,0,4,174,1,0,0,0,6,184,1,0,0,0,8,188,
1,0,0,0,10,203,1,0,0,0,12,218,1,0,0,0,14,227,1,0,0,0,16,237,1,0,0,0,18,245,
1,0,0,0,20,252,1,0,0,0,22,263,1,0,0,0,24,265,1,0,0,0,26,267,1,0,0,0,28,269,
1,0,0,0,30,279,1,0,0,0,32,282,1,0,0,0,34,301,1,0,0,0,36,309,1,0,0,0,38,324,
1,0,0,0,40,346,1,0,0,0,42,357,1,0,0,0,44,370,1,0,0,0,46,390,1,0,0,0,48,402,
1,0,0,0,50,409,1,0,0,0,52,411,1,0,0,0,54,415,1,0,0,0,56,424,1,0,0,0,58,428,
1,0,0,0,60,432,1,0,0,0,62,447,1,0,0,0,64,460,1,0,0,0,66,470,1,0,0,0,68,472,
1,0,0,0,70,480,1,0,0,0,72,484,1,0,0,0,74,499,1,0,0,0,76,512,1,0,0,0,78,520,
1,0,0,0,80,525,1,0,0,0,82,539,1,0,0,0,84,553,1,0,0,0,86,559,1,0,0,0,88,564,
1,0,0,0,90,570,1,0,0,0,92,576,1,0,0,0,94,585,1,0,0,0,96,589,1,0,0,0,98,596,
1,0,0,0,100,609,1,0,0,0,102,620,1,0,0,0,104,637,1,0,0,0,106,648,1,0,0,0,
108,651,1,0,0,0,110,659,1,0,0,0,112,671,1,0,0,0,114,673,1,0,0,0,116,688,
1,0,0,0,118,798,1,0,0,0,120,807,1,0,0,0,122,815,1,0,0,0,124,819,1,0,0,0,
126,839,1,0,0,0,128,844,1,0,0,0,130,846,1,0,0,0,132,856,1,0,0,0,134,858,
1,0,0,0,136,860,1,0,0,0,138,862,1,0,0,0,140,864,1,0,0,0,142,866,1,0,0,0,
144,868,1,0,0,0,146,870,1,0,0,0,148,872,1,0,0,0,150,874,1,0,0,0,152,879,
1,0,0,0,154,889,1,0,0,0,156,897,1,0,0,0,158,159,3,120,60,0,159,160,3,2,1,
0,160,161,3,120,60,0,161,162,5,0,0,1,162,1,1,0,0,0,163,168,3,120,60,0,164,
169,3,4,2,0,165,169,3,6,3,0,166,169,3,16,8,0,167,169,3,20,10,0,168,164,1,
0,0,0,168,165,1,0,0,0,168,166,1,0,0,0,168,167,1,0,0,0,169,170,1,0,0,0,170,
171,3,120,60,0,171,3,1,0,0,0,172,175,3,20,10,0,173,175,3,14,7,0,174,172,
1,0,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,177,3,120,60,0,177,178,5,31,
0,0,178,179,3,120,60,0,179,180,3,56,28,0,180,5,1,0,0,0,181,185,3,8,4,0,182,
185,3,10,5,0,183,185,3,12,6,0,184,181,1,0,0,0,184,182,1,0,0,0,184,183,1,
0,0,0,185,7,1,0,0,0,186,189,3,20,10,0,187,189,3,14,7,0,188,186,1,0,0,0,188,
187,1,0,0,0,189,197,1,0,0,0,190,191,3,120,60,0,191,192,3,50,25,0,192,195,
3,120,60,0,193,196,3,20,10,0,194,196,3,14,7,0,195,193,1,0,0,0,195,194,1,
0,0,0,196,198,1,0,0,0,197,190,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,
200,1,0,0,0,200,9,1,0,0,0,201,204,3,20,10,0,202,204,3,14,7,0,203,201,1,0,
0,0,203,202,1,0,0,0,204,212,1,0,0,0,205,206,3,120,60,0,206,207,3,52,26,0,
207,210,3,120,60,0,208,211,3,20,10,0,209,211,3,14,7,0,210,208,1,0,0,0,210,
209,1,0,0,0,211,213,1,0,0,0,212,205,1,0,0,0,213,214,1,0,0,0,214,212,1,0,
0,0,214,215,1,0,0,0,215,11,1,0,0,0,216,219,3,20,10,0,217,219,3,14,7,0,218,
216,1,0,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,221,3,120,60,0,221,222,3,
54,27,0,222,225,3,120,60,0,223,226,3,20,10,0,224,226,3,14,7,0,225,223,1,
0,0,0,225,224,1,0,0,0,226,13,1,0,0,0,227,228,5,13,0,0,228,232,3,120,60,0,
229,233,3,4,2,0,230,233,3,6,3,0,231,233,3,20,10,0,232,229,1,0,0,0,232,230,
1,0,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,235,3,120,60,0,235,236,5,14,
0,0,236,15,1,0,0,0,237,241,3,20,10,0,238,239,3,120,60,0,239,240,3,18,9,0,
240,242,1,0,0,0,241,238,1,0,0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,244,
1,0,0,0,244,17,1,0,0,0,245,246,3,24,12,0,246,247,3,120,60,0,247,248,3,20,
10,0,248,19,1,0,0,0,249,250,3,36,18,0,250,251,3,120,60,0,251,253,1,0,0,0,
252,249,1,0,0,0,252,253,1,0,0,0,253,257,1,0,0,0,254,255,3,26,13,0,255,256,
3,120,60,0,256,258,1,0,0,0,257,254,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,
0,259,260,3,22,11,0,260,21,1,0,0,0,261,264,3,28,14,0,262,264,3,34,17,0,263,
261,1,0,0,0,263,262,1,0,0,0,264,23,1,0,0,0,265,266,5,19,0,0,266,25,1,0,0,
0,267,268,5,67,0,0,268,27,1,0,0,0,269,277,3,30,15,0,270,271,3,120,60,0,271,
272,5,97,0,0,272,273,3,120,60,0,273,274,3,32,16,0,274,275,3,120,60,0,275,
276,5,97,0,0,276,278,1,0,0,0,277,270,1,0,0,0,277,278,1,0,0,0,278,29,1,0,
0,0,279,280,3,118,59,0,280,31,1,0,0,0,281,283,3,152,76,0,282,281,1,0,0,0,
283,284,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,298,1,0,0,0,286,288,
3,134,67,0,287,286,1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,
0,290,292,1,0,0,0,291,293,3,152,76,0,292,291,1,0,0,0,293,294,1,0,0,0,294,
292,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,287,1,0,0,0,297,300,1,0,
0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,33,1,0,0,0,300,298,1,0,0,0,301,302,
5,15,0,0,302,35,1,0,0,0,303,310,3,42,21,0,304,310,3,40,20,0,305,310,3,38,
19,0,306,310,3,48,24,0,307,310,3,46,23,0,308,310,3,44,22,0,309,303,1,0,0,
0,309,304,1,0,0,0,309,305,1,0,0,0,309,306,1,0,0,0,309,307,1,0,0,0,309,308,
1,0,0,0,310,37,1,0,0,0,311,325,5,33,0,0,312,313,7,0,0,0,313,314,7,1,0,0,
314,315,7,2,0,0,315,316,7,3,0,0,316,317,7,1,0,0,317,318,7,4,0,0,318,319,
7,0,0,0,319,320,7,5,0,0,320,321,7,4,0,0,321,322,7,6,0,0,322,323,7,7,0,0,
323,325,7,8,0,0,324,311,1,0,0,0,324,312,1,0,0,0,325,39,1,0,0,0,326,327,5,
33,0,0,327,347,5,33,0,0,328,329,7,0,0,0,329,330,7,1,0,0,330,331,7,2,0,0,
331,332,7,3,0,0,332,333,7,1,0,0,333,334,7,4,0,0,334,335,7,0,0,0,335,336,
7,5,0,0,336,337,7,4,0,0,337,338,7,6,0,0,338,339,7,7,0,0,339,340,7,9,0,0,
340,341,7,2,0,0,341,342,7,1,0,0,342,343,7,10,0,0,343,344,7,8,0,0,344,345,
7,7,0,0,345,347,7,8,0,0,346,326,1,0,0,0,346,328,1,0,0,0,347,41,1,0,0,0,348,
349,5,33,0,0,349,358,5,6,0,0,350,351,7,3,0,0,351,352,7,11,0,0,352,353,7,
12,0,0,353,354,7,10,0,0,354,355,7,0,0,0,355,356,7,7,0,0,356,358,7,8,0,0,
357,348,1,0,0,0,357,350,1,0,0,0,358,43,1,0,0,0,359,371,5,35,0,0,360,361,
7,5,0,0,361,362,7,4,0,0,362,363,7,3,0,0,363,364,7,1,0,0,364,365,7,2,0,0,
365,366,7,6,0,0,366,367,7,7,0,0,367,368,7,9,0,0,368,369,7,7,0,0,369,371,
7,8,0,0,370,359,1,0,0,0,370,360,1,0,0,0,371,45,1,0,0,0,372,373,5,35,0,0,
373,391,5,35,0,0,374,375,7,5,0,0,375,376,7,4,0,0,376,377,7,3,0,0,377,378,
7,1,0,0,378,379,7,2,0,0,379,380,7,6,0,0,380,381,7,7,0,0,381,382,7,9,0,0,
382,383,7,7,0,0,383,384,7,9,0,0,384,385,7,2,0,0,385,386,7,1,0,0,386,387,
7,10,0,0,387,388,7,8,0,0,388,389,7,7,0,0,389,391,7,8,0,0,390,372,1,0,0,0,
390,374,1,0,0,0,391,47,1,0,0,0,392,393,5,35,0,0,393,403,5,6,0,0,394,395,
7,13,0,0,395,396,7,5,0,0,396,397,7,9,0,0,397,398,7,1,0,0,398,399,7,4,0,0,
399,400,7,6,0,0,400,401,7,7,0,0,401,403,7,8,0,0,402,392,1,0,0,0,402,394,
1,0,0,0,403,49,1,0,0,0,404,405,7,5,0,0,405,406,7,4,0,0,406,407,7,0,0,0,407,
410,3,122,61,0,408,410,5,17,0,0,409,404,1,0,0,0,409,408,1,0,0,0,410,51,1,
0,0,0,411,412,7,7,0,0,412,413,7,9,0,0,413,414,3,122,61,0,414,53,1,0,0,0,
415,416,7,14,0,0,416,417,7,12,0,0,417,418,7,4,0,0,418,419,7,15,0,0,419,420,
7,2,0,0,420,421,3,122,61,0,421,55,1,0,0,0,422,425,3,66,33,0,423,425,3,58,
29,0,424,422,1,0,0,0,424,423,1,0,0,0,425,57,1,0,0,0,426,429,3,60,30,0,427,
429,3,62,31,0,428,426,1,0,0,0,428,427,1,0,0,0,429,59,1,0,0,0,430,433,3,66,
33,0,431,433,3,64,32,0,432,430,1,0,0,0,432,431,1,0,0,0,433,441,1,0,0,0,434,
435,3,120,60,0,435,436,3,50,25,0,436,439,3,120,60,0,437,440,3,66,33,0,438,
440,3,64,32,0,439,437,1,0,0,0,439,438,1,0,0,0,440,442,1,0,0,0,441,434,1,
0,0,0,442,443,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,61,1,0,0,0,445,
448,3,66,33,0,446,448,3,64,32,0,447,445,1,0,0,0,447,446,1,0,0,0,448,456,
1,0,0,0,449,450,3,120,60,0,450,451,3,52,26,0,451,454,3,120,60,0,452,455,
3,66,33,0,453,455,3,64,32,0,454,452,1,0,0,0,454,453,1,0,0,0,455,457,1,0,
0,0,456,449,1,0,0,0,457,458,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,
63,1,0,0,0,460,461,5,13,0,0,461,462,3,120,60,0,462,463,3,58,29,0,463,464,
3,120,60,0,464,465,5,14,0,0,465,65,1,0,0,0,466,471,3,70,35,0,467,471,3,80,
40,0,468,471,3,68,34,0,469,471,3,82,41,0,470,466,1,0,0,0,470,467,1,0,0,0,
470,468,1,0,0,0,470,469,1,0,0,0,471,67,1,0,0,0,472,473,5,13,0,0,473,474,
3,120,60,0,474,475,3,56,28,0,475,476,3,120,60,0,476,477,5,14,0,0,477,69,
1,0,0,0,478,481,3,72,36,0,479,481,3,74,37,0,480,478,1,0,0,0,480,479,1,0,
0,0,481,71,1,0,0,0,482,485,3,78,39,0,483,485,3,76,38,0,484,482,1,0,0,0,484,
483,1,0,0,0,485,493,1,0,0,0,486,487,3,120,60,0,487,488,3,50,25,0,488,491,
3,120,60,0,489,492,3,78,39,0,490,492,3,76,38,0,491,489,1,0,0,0,491,490,1,
0,0,0,492,494,1,0,0,0,493,486,1,0,0,0,494,495,1,0,0,0,495,493,1,0,0,0,495,
496,1,0,0,0,496,73,1,0,0,0,497,500,3,78,39,0,498,500,3,76,38,0,499,497,1,
0,0,0,499,498,1,0,0,0,500,508,1,0,0,0,501,502,3,120,60,0,502,503,3,52,26,
0,503,506,3,120,60,0,504,507,3,78,39,0,505,507,3,76,38,0,506,504,1,0,0,0,
506,505,1,0,0,0,507,509,1,0,0,0,508,501,1,0,0,0,509,510,1,0,0,0,510,508,
1,0,0,0,510,511,1,0,0,0,511,75,1,0,0,0,512,513,5,13,0,0,513,514,3,120,60,
0,514,515,3,70,35,0,515,516,3,120,60,0,516,517,5,14,0,0,517,77,1,0,0,0,518,
521,3,82,41,0,519,521,3,76,38,0,520,518,1,0,0,0,520,519,1,0,0,0,521,79,1,
0,0,0,522,523,3,90,45,0,523,524,3,120,60,0,524,526,1,0,0,0,525,522,1,0,0,
0,525,526,1,0,0,0,526,527,1,0,0,0,527,528,5,96,0,0,528,531,3,120,60,0,529,
532,3,70,35,0,530,532,3,82,41,0,531,529,1,0,0,0,531,530,1,0,0,0,532,533,
1,0,0,0,533,534,3,120,60,0,534,535,5,98,0,0,535,81,1,0,0,0,536,537,3,90,
45,0,537,538,3,120,60,0,538,540,1,0,0,0,539,536,1,0,0,0,539,540,1,0,0,0,
540,544,1,0,0,0,541,542,3,100,50,0,542,543,3,120,60,0,543,545,1,0,0,0,544,
541,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,547,3,20,10,0,547,551,3,
120,60,0,548,552,3,88,44,0,549,552,3,86,43,0,550,552,3,84,42,0,551,548,1,
0,0,0,551,549,1,0,0,0,551,550,1,0,0,0,552,83,1,0,0,0,553,554,3,106,53,0,
554,555,3,120,60,0,555,556,3,142,71,0,556,557,3,110,55,0,557,558,3,142,71,
0,558,85,1,0,0,0,559,560,3,104,52,0,560,561,3,120,60,0,561,562,5,8,0,0,562,
563,3,108,54,0,563,87,1,0,0,0,564,565,3,102,51,0,565,568,3,120,60,0,566,
569,3,20,10,0,567,569,3,14,7,0,568,566,1,0,0,0,568,567,1,0,0,0,569,89,1,
0,0,0,570,571,5,64,0,0,571,572,3,92,46,0,572,573,3,94,47,0,573,574,3,96,
48,0,574,575,5,66,0,0,575,91,1,0,0,0,576,577,3,116,58,0,577,93,1,0,0,0,578,
579,5,19,0,0,579,586,5,19,0,0,580,581,3,122,61,0,581,582,7,6,0,0,582,583,
7,7,0,0,583,584,3,122,61,0,584,586,1,0,0,0,585,578,1,0,0,0,585,580,1,0,0,
0,586,95,1,0,0,0,587,590,3,116,58,0,588,590,3,98,49,0,589,587,1,0,0,0,589,
588,1,0,0,0,590,97,1,0,0,0,591,597,5,15,0,0,592,593,7,14,0,0,593,594,7,5,
0,0,594,595,7,4,0,0,595,597,7,16,0,0,596,591,1,0,0,0,596,592,1,0,0,0,597,
99,1,0,0,0,598,599,7,9,0,0,599,600,7,1,0,0,600,601,7,17,0,0,601,602,7,1,
0,0,602,603,7,9,0,0,603,604,7,2,0,0,604,605,7,1,0,0,605,606,7,7,0,0,606,
610,7,8,0,0,607,608,7,9,0,0,608,610,3,122,61,0,609,598,1,0,0,0,609,607,1,
0,0,0,610,101,1,0,0,0,611,621,5,34,0,0,612,613,5,6,0,0,613,621,5,34,0,0,
614,615,7,4,0,0,615,616,7,7,0,0,616,617,7,6,0,0,617,618,3,122,61,0,618,619,
5,34,0,0,619,621,1,0,0,0,620,611,1,0,0,0,620,612,1,0,0,0,620,614,1,0,0,0,
621,103,1,0,0,0,622,638,5,34,0,0,623,624,5,6,0,0,624,638,5,34,0,0,625,626,
7,4,0,0,626,627,7,7,0,0,627,628,7,6,0,0,628,629,3,122,61,0,629,630,5,34,
0,0,630,638,1,0,0,0,631,632,5,33,0,0,632,638,5,34,0,0,633,638,5,33,0,0,634,
635,5,35,0,0,635,638,5,34,0,0,636,638,5,35,0,0,637,622,1,0,0,0,637,623,1,
0,0,0,637,625,1,0,0,0,637,631,1,0,0,0,637,633,1,0,0,0,637,634,1,0,0,0,637,
636,1,0,0,0,638,105,1,0,0,0,639,649,5,34,0,0,640,641,5,6,0,0,641,649,5,34,
0,0,642,643,7,4,0,0,643,644,7,7,0,0,644,645,7,6,0,0,645,646,3,122,61,0,646,
647,5,34,0,0,647,649,1,0,0,0,648,639,1,0,0,0,648,640,1,0,0,0,648,642,1,0,
0,0,649,107,1,0,0,0,650,652,7,18,0,0,651,650,1,0,0,0,651,652,1,0,0,0,652,
655,1,0,0,0,653,656,3,114,57,0,654,656,3,112,56,0,655,653,1,0,0,0,655,654,
1,0,0,0,656,109,1,0,0,0,657,660,3,154,77,0,658,660,3,156,78,0,659,657,1,
0,0,0,659,658,1,0,0,0,660,661,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,
111,1,0,0,0,663,667,3,150,75,0,664,666,3,146,73,0,665,664,1,0,0,0,666,669,
1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,672,1,0,0,0,669,667,1,0,0,0,
670,672,3,148,74,0,671,663,1,0,0,0,671,670,1,0,0,0,672,113,1,0,0,0,673,674,
3,112,56,0,674,676,5,19,0,0,675,677,3,146,73,0,676,675,1,0,0,0,677,678,1,
0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,115,1,0,0,0,680,684,3,150,75,0,
681,683,3,146,73,0,682,681,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,684,685,
1,0,0,0,685,689,1,0,0,0,686,684,1,0,0,0,687,689,3,148,74,0,688,680,1,0,0,
0,688,687,1,0,0,0,689,117,1,0,0,0,690,691,5,77,0,0,691,692,5,89,0,0,692,
693,5,89,0,0,693,695,5,85,0,0,694,696,3,128,64,0,695,694,1,0,0,0,696,697,
1,0,0,0,697,695,1,0,0,0,697,698,1,0,0,0,698,799,1,0,0,0,699,700,3,150,75,
0,700,701,3,146,73,0,701,702,3,146,73,0,702,703,3,146,73,0,703,704,3,146,
73,0,704,796,3,146,73,0,705,707,3,146,73,0,706,705,1,0,0,0,706,707,1,0,0,
0,707,797,1,0,0,0,708,709,3,146,73,0,709,710,3,146,73,0,710,797,1,0,0,0,
711,712,3,146,73,0,712,713,3,146,73,0,713,714,3,146,73,0,714,797,1,0,0,0,
715,716,3,146,73,0,716,717,3,146,73,0,717,718,3,146,73,0,718,719,3,146,73,
0,719,797,1,0,0,0,720,721,3,146,73,0,721,722,3,146,73,0,722,723,3,146,73,
0,723,724,3,146,73,0,724,725,3,146,73,0,725,797,1,0,0,0,726,727,3,146,73,
0,727,728,3,146,73,0,728,729,3,146,73,0,729,730,3,146,73,0,730,731,3,146,
73,0,731,732,3,146,73,0,732,797,1,0,0,0,733,734,3,146,73,0,734,735,3,146,
73,0,735,736,3,146,73,0,736,737,3,146,73,0,737,738,3,146,73,0,738,739,3,
146,73,0,739,740,3,146,73,0,740,797,1,0,0,0,741,742,3,146,73,0,742,743,3,
146,73,0,743,744,3,146,73,0,744,745,3,146,73,0,745,746,3,146,73,0,746,747,
3,146,73,0,747,748,3,146,73,0,748,749,3,146,73,0,749,797,1,0,0,0,750,751,
3,146,73,0,751,752,3,146,73,0,752,753,3,146,73,0,753,754,3,146,73,0,754,
755,3,146,73,0,755,756,3,146,73,0,756,757,3,146,73,0,757,758,3,146,73,0,
758,759,3,146,73,0,759,797,1,0,0,0,760,761,3,146,73,0,761,762,3,146,73,0,
762,763,3,146,73,0,763,764,3,146,73,0,764,765,3,146,73,0,765,766,3,146,73,
0,766,767,3,146,73,0,767,768,3,146,73,0,768,769,3,146,73,0,769,770,3,146,
73,0,770,797,1,0,0,0,771,772,3,146,73,0,772,773,3,146,73,0,773,774,3,146,
73,0,774,775,3,146,73,0,775,776,3,146,73,0,776,777,3,146,73,0,777,778,3,
146,73,0,778,779,3,146,73,0,779,780,3,146,73,0,780,781,3,146,73,0,781,782,
3,146,73,0,782,797,1,0,0,0,783,784,3,146,73,0,784,785,3,146,73,0,785,786,
3,146,73,0,786,787,3,146,73,0,787,788,3,146,73,0,788,789,3,146,73,0,789,
790,3,146,73,0,790,791,3,146,73,0,791,792,3,146,73,0,792,793,3,146,73,0,
793,794,3,146,73,0,794,795,3,146,73,0,795,797,1,0,0,0,796,706,1,0,0,0,796,
708,1,0,0,0,796,711,1,0,0,0,796,715,1,0,0,0,796,720,1,0,0,0,796,726,1,0,
0,0,796,733,1,0,0,0,796,741,1,0,0,0,796,750,1,0,0,0,796,760,1,0,0,0,796,
771,1,0,0,0,796,783,1,0,0,0,797,799,1,0,0,0,798,690,1,0,0,0,798,699,1,0,
0,0,799,119,1,0,0,0,800,806,3,134,67,0,801,806,3,136,68,0,802,806,3,138,
69,0,803,806,3,140,70,0,804,806,3,124,62,0,805,800,1,0,0,0,805,801,1,0,0,
0,805,802,1,0,0,0,805,803,1,0,0,0,805,804,1,0,0,0,806,809,1,0,0,0,807,805,
1,0,0,0,807,808,1,0,0,0,808,121,1,0,0,0,809,807,1,0,0,0,810,816,3,134,67,
0,811,816,3,136,68,0,812,816,3,138,69,0,813,816,3,140,70,0,814,816,3,124,
62,0,815,810,1,0,0,0,815,811,1,0,0,0,815,812,1,0,0,0,815,813,1,0,0,0,815,
814,1,0,0,0,816,817,1,0,0,0,817,815,1,0,0,0,817,818,1,0,0,0,818,123,1,0,
0,0,819,820,5,20,0,0,820,821,5,15,0,0,821,826,1,0,0,0,822,825,3,126,63,0,
823,825,3,130,65,0,824,822,1,0,0,0,824,823,1,0,0,0,825,828,1,0,0,0,826,824,
1,0,0,0,826,827,1,0,0,0,827,829,1,0,0,0,828,826,1,0,0,0,829,830,5,15,0,0,
830,831,5,20,0,0,831,125,1,0,0,0,832,840,3,134,67,0,833,840,3,136,68,0,834,
840,3,138,69,0,835,840,3,140,70,0,836,840,7,19,0,0,837,840,7,20,0,0,838,
840,5,1,0,0,839,832,1,0,0,0,839,833,1,0,0,0,839,834,1,0,0,0,839,835,1,0,
0,0,839,836,1,0,0,0,839,837,1,0,0,0,839,838,1,0,0,0,840,127,1,0,0,0,841,
845,7,21,0,0,842,845,7,20,0,0,843,845,5,1,0,0,844,841,1,0,0,0,844,842,1,
0,0,0,844,843,1,0,0,0,845,129,1,0,0,0,846,847,5,15,0,0,847,848,3,132,66,
0,848,131,1,0,0,0,849,857,3,134,67,0,850,857,3,136,68,0,851,857,3,138,69,
0,852,857,3,140,70,0,853,857,7,22,0,0,854,857,7,23,0,0,855,857,5,1,0,0,856,
849,1,0,0,0,856,850,1,0,0,0,856,851,1,0,0,0,856,852,1,0,0,0,856,853,1,0,
0,0,856,854,1,0,0,0,856,855,1,0,0,0,857,133,1,0,0,0,858,859,5,5,0,0,859,
135,1,0,0,0,860,861,5,2,0,0,861,137,1,0,0,0,862,863,5,4,0,0,863,139,1,0,
0,0,864,865,5,3,0,0,865,141,1,0,0,0,866,867,5,7,0,0,867,143,1,0,0,0,868,
869,5,65,0,0,869,145,1,0,0,0,870,871,7,24,0,0,871,147,1,0,0,0,872,873,5,
21,0,0,873,149,1,0,0,0,874,875,7,25,0,0,875,151,1,0,0,0,876,880,7,26,0,0,
877,880,7,27,0,0,878,880,5,1,0,0,879,876,1,0,0,0,879,877,1,0,0,0,879,878,
1,0,0,0,880,153,1,0,0,0,881,890,3,134,67,0,882,890,3,136,68,0,883,890,3,
138,69,0,884,890,3,140,70,0,885,890,7,28,0,0,886,890,7,29,0,0,887,890,7,
30,0,0,888,890,5,1,0,0,889,881,1,0,0,0,889,882,1,0,0,0,889,883,1,0,0,0,889,
884,1,0,0,0,889,885,1,0,0,0,889,886,1,0,0,0,889,887,1,0,0,0,889,888,1,0,
0,0,890,155,1,0,0,0,891,892,3,144,72,0,892,893,3,142,71,0,893,898,1,0,0,
0,894,895,3,144,72,0,895,896,3,144,72,0,896,898,1,0,0,0,897,891,1,0,0,0,
897,894,1,0,0,0,898,157,1,0,0,0,84,168,174,184,188,195,199,203,210,214,218,
225,232,243,252,257,263,277,284,289,294,298,309,324,346,357,370,390,402,
409,424,428,432,439,443,447,454,458,470,480,484,491,495,499,506,510,520,
525,531,539,544,551,568,585,589,596,609,620,637,648,651,655,659,661,667,
671,678,684,688,697,706,796,798,805,807,815,817,824,826,839,844,856,879,
889,897];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class ECLParser extends antlr4.Parser {

    static grammarFileName = "java-escape";
    static literalNames = [ null, null, "'\\t'", "'\\n'", "'\\r'", "' '", 
                            "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
                            "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", 
                            "'/'", "'0'", "'1'", "'2'", "'3'", "'4'", "'5'", 
                            "'6'", "'7'", "'8'", "'9'", "':'", "';'", "'<'", 
                            "'='", "'>'", "'?'", "'@'", "'A'", "'B'", "'C'", 
                            "'D'", "'E'", "'F'", "'G'", "'H'", "'I'", "'J'", 
                            "'K'", "'L'", "'M'", "'N'", "'O'", "'P'", "'Q'", 
                            "'R'", "'S'", "'T'", "'U'", "'V'", "'W'", "'X'", 
                            "'Y'", "'Z'", "'['", "'\\'", "']'", "'^'", "'_'", 
                            "'`'", "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", 
                            "'g'", "'h'", "'i'", "'j'", "'k'", "'l'", "'m'", 
                            "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", "'t'", 
                            "'u'", "'v'", "'w'", "'x'", "'y'", "'z'", "'{'", 
                            "'|'", "'}'", "'~'" ];
    static symbolicNames = [ null, "UTF8_LETTER", "TAB", "LF", "CR", "SPACE", 
                             "EXCLAMATION", "QUOTE", "POUND", "DOLLAR", 
                             "PERCENT", "AMPERSAND", "APOSTROPHE", "LEFT_PAREN", 
                             "RIGHT_PAREN", "ASTERISK", "PLUS", "COMMA", 
                             "DASH", "PERIOD", "SLASH", "ZERO", "ONE", "TWO", 
                             "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", 
                             "NINE", "COLON", "SEMICOLON", "LESS_THAN", 
                             "EQUALS", "GREATER_THAN", "QUESTION", "AT", 
                             "CAP_A", "CAP_B", "CAP_C", "CAP_D", "CAP_E", 
                             "CAP_F", "CAP_G", "CAP_H", "CAP_I", "CAP_J", 
                             "CAP_K", "CAP_L", "CAP_M", "CAP_N", "CAP_O", 
                             "CAP_P", "CAP_Q", "CAP_R", "CAP_S", "CAP_T", 
                             "CAP_U", "CAP_V", "CAP_W", "CAP_X", "CAP_Y", 
                             "CAP_Z", "LEFT_BRACE", "BACKSLASH", "RIGHT_BRACE", 
                             "CARAT", "UNDERSCORE", "ACCENT", "A", "B", 
                             "C", "D", "E", "F", "G", "H", "I", "J", "K", 
                             "L", "M", "N", "O", "P", "Q", "R", "S", "T", 
                             "U", "V", "W", "X", "Y", "Z", "LEFT_CURLY_BRACE", 
                             "PIPE", "RIGHT_CURLY_BRACE", "TILDE" ];
    static ruleNames = [ "ecl", "expressionconstraint", "refinedexpressionconstraint", 
                         "compoundexpressionconstraint", "conjunctionexpressionconstraint", 
                         "disjunctionexpressionconstraint", "exclusionexpressionconstraint", 
                         "bracketcompoundexpressionconstraint", "dottedexpressionconstraint", 
                         "dottedexpressionattribute", "subexpressionconstraint", 
                         "eclfocusconcept", "dot", "memberof", "eclconceptreference", 
                         "conceptid", "term", "wildcard", "constraintoperator", 
                         "descendantof", "descendantorselfof", "childof", 
                         "ancestorof", "ancestororselfof", "parentof", "conjunction", 
                         "disjunction", "exclusion", "eclrefinement", "compoundrefinementset", 
                         "conjunctionrefinementset", "disjunctionrefinementset", 
                         "bracketcompoundrefinementset", "subrefinement", 
                         "bracketsubrefinement", "compoundattributeset", 
                         "conjunctionattributeset", "disjunctionattributeset", 
                         "bracketattributeset", "subattributeset", "eclattributegroup", 
                         "eclattribute", "eclattributestringvalue", "eclattributenumbervalue", 
                         "eclattributeexpressionvalue", "cardinality", "minvalue", 
                         "to", "maxvalue", "many", "reverseflag", "expressioncomparisonoperator", 
                         "numericcomparisonoperator", "stringcomparisonoperator", 
                         "numericvalue", "stringvalue", "integervalue", 
                         "decimalvalue", "nonnegativeintegervalue", "sctid", 
                         "ws", "mws", "comment", "nonstarchar", "nonspacechar", 
                         "starwithnonfslash", "nonfslash", "sp", "htab", 
                         "cr", "lf", "qm", "bs", "digit", "zero", "digitnonzero", 
                         "nonwsnonpipe", "anynonescapedchar", "escapedchar" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ECLParser.ruleNames;
        this.literalNames = ECLParser.literalNames;
        this.symbolicNames = ECLParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	ecl() {
	    let localctx = new EclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ECLParser.RULE_ecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 158;
	        this.ws();
	        this.state = 159;
	        this.expressionconstraint();
	        this.state = 160;
	        this.ws();
	        this.state = 161;
	        this.match(ECLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionconstraint() {
	    let localctx = new ExpressionconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ECLParser.RULE_expressionconstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 163;
	        this.ws();
	        this.state = 168;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 164;
	            this.refinedexpressionconstraint();
	            break;

	        case 2:
	            this.state = 165;
	            this.compoundexpressionconstraint();
	            break;

	        case 3:
	            this.state = 166;
	            this.dottedexpressionconstraint();
	            break;

	        case 4:
	            this.state = 167;
	            this.subexpressionconstraint();
	            break;

	        }
	        this.state = 170;
	        this.ws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refinedexpressionconstraint() {
	    let localctx = new RefinedexpressionconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ECLParser.RULE_refinedexpressionconstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 174;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 33:
	        case 35:
	        case 38:
	        case 40:
	        case 41:
	        case 53:
	        case 67:
	        case 70:
	        case 72:
	        case 73:
	        case 77:
	        case 85:
	            this.state = 172;
	            this.subexpressionconstraint();
	            break;
	        case 13:
	            this.state = 173;
	            this.bracketcompoundexpressionconstraint();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 176;
	        this.ws();
	        this.state = 177;
	        this.match(ECLParser.COLON);
	        this.state = 178;
	        this.ws();
	        this.state = 179;
	        this.eclrefinement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundexpressionconstraint() {
	    let localctx = new CompoundexpressionconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, ECLParser.RULE_compoundexpressionconstraint);
	    try {
	        this.state = 184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 181;
	            this.conjunctionexpressionconstraint();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 182;
	            this.disjunctionexpressionconstraint();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 183;
	            this.exclusionexpressionconstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conjunctionexpressionconstraint() {
	    let localctx = new ConjunctionexpressionconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ECLParser.RULE_conjunctionexpressionconstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 188;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 33:
	        case 35:
	        case 38:
	        case 40:
	        case 41:
	        case 53:
	        case 67:
	        case 70:
	        case 72:
	        case 73:
	        case 77:
	        case 85:
	            this.state = 186;
	            this.subexpressionconstraint();
	            break;
	        case 13:
	            this.state = 187;
	            this.bracketcompoundexpressionconstraint();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 197; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 190;
	        		this.ws();
	        		this.state = 191;
	        		this.conjunction();
	        		this.state = 192;
	        		this.ws();
	        		this.state = 195;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case 15:
	        		case 22:
	        		case 23:
	        		case 24:
	        		case 25:
	        		case 26:
	        		case 27:
	        		case 28:
	        		case 29:
	        		case 30:
	        		case 33:
	        		case 35:
	        		case 38:
	        		case 40:
	        		case 41:
	        		case 53:
	        		case 67:
	        		case 70:
	        		case 72:
	        		case 73:
	        		case 77:
	        		case 85:
	        		    this.state = 193;
	        		    this.subexpressionconstraint();
	        		    break;
	        		case 13:
	        		    this.state = 194;
	        		    this.bracketcompoundexpressionconstraint();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 199; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,5, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	disjunctionexpressionconstraint() {
	    let localctx = new DisjunctionexpressionconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ECLParser.RULE_disjunctionexpressionconstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 203;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 33:
	        case 35:
	        case 38:
	        case 40:
	        case 41:
	        case 53:
	        case 67:
	        case 70:
	        case 72:
	        case 73:
	        case 77:
	        case 85:
	            this.state = 201;
	            this.subexpressionconstraint();
	            break;
	        case 13:
	            this.state = 202;
	            this.bracketcompoundexpressionconstraint();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 212; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 205;
	        		this.ws();
	        		this.state = 206;
	        		this.disjunction();
	        		this.state = 207;
	        		this.ws();
	        		this.state = 210;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case 15:
	        		case 22:
	        		case 23:
	        		case 24:
	        		case 25:
	        		case 26:
	        		case 27:
	        		case 28:
	        		case 29:
	        		case 30:
	        		case 33:
	        		case 35:
	        		case 38:
	        		case 40:
	        		case 41:
	        		case 53:
	        		case 67:
	        		case 70:
	        		case 72:
	        		case 73:
	        		case 77:
	        		case 85:
	        		    this.state = 208;
	        		    this.subexpressionconstraint();
	        		    break;
	        		case 13:
	        		    this.state = 209;
	        		    this.bracketcompoundexpressionconstraint();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 214; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,8, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusionexpressionconstraint() {
	    let localctx = new ExclusionexpressionconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, ECLParser.RULE_exclusionexpressionconstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 218;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 33:
	        case 35:
	        case 38:
	        case 40:
	        case 41:
	        case 53:
	        case 67:
	        case 70:
	        case 72:
	        case 73:
	        case 77:
	        case 85:
	            this.state = 216;
	            this.subexpressionconstraint();
	            break;
	        case 13:
	            this.state = 217;
	            this.bracketcompoundexpressionconstraint();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 220;
	        this.ws();
	        this.state = 221;
	        this.exclusion();
	        this.state = 222;
	        this.ws();
	        this.state = 225;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 33:
	        case 35:
	        case 38:
	        case 40:
	        case 41:
	        case 53:
	        case 67:
	        case 70:
	        case 72:
	        case 73:
	        case 77:
	        case 85:
	            this.state = 223;
	            this.subexpressionconstraint();
	            break;
	        case 13:
	            this.state = 224;
	            this.bracketcompoundexpressionconstraint();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracketcompoundexpressionconstraint() {
	    let localctx = new BracketcompoundexpressionconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, ECLParser.RULE_bracketcompoundexpressionconstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 227;
	        this.match(ECLParser.LEFT_PAREN);
	        this.state = 228;
	        this.ws();
	        this.state = 232;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 229;
	            this.refinedexpressionconstraint();
	            break;

	        case 2:
	            this.state = 230;
	            this.compoundexpressionconstraint();
	            break;

	        case 3:
	            this.state = 231;
	            this.subexpressionconstraint();
	            break;

	        }
	        this.state = 234;
	        this.ws();
	        this.state = 235;
	        this.match(ECLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dottedexpressionconstraint() {
	    let localctx = new DottedexpressionconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ECLParser.RULE_dottedexpressionconstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 237;
	        this.subexpressionconstraint();
	        this.state = 241; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 238;
	        		this.ws();
	        		this.state = 239;
	        		this.dottedexpressionattribute();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 243; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,12, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dottedexpressionattribute() {
	    let localctx = new DottedexpressionattributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ECLParser.RULE_dottedexpressionattribute);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        this.dot();
	        this.state = 246;
	        this.ws();
	        this.state = 247;
	        this.subexpressionconstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subexpressionconstraint() {
	    let localctx = new SubexpressionconstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ECLParser.RULE_subexpressionconstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 252;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & 1048997) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & 32781) !== 0)) {
	            this.state = 249;
	            this.constraintoperator();
	            this.state = 250;
	            this.ws();
	        }

	        this.state = 257;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===67) {
	            this.state = 254;
	            this.memberof();
	            this.state = 255;
	            this.ws();
	        }

	        this.state = 259;
	        this.eclfocusconcept();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclfocusconcept() {
	    let localctx = new EclfocusconceptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ECLParser.RULE_eclfocusconcept);
	    try {
	        this.state = 263;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 261;
	            this.eclconceptreference();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 262;
	            this.wildcard();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dot() {
	    let localctx = new DotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, ECLParser.RULE_dot);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 265;
	        this.match(ECLParser.PERIOD);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberof() {
	    let localctx = new MemberofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ECLParser.RULE_memberof);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        this.match(ECLParser.CARAT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclconceptreference() {
	    let localctx = new EclconceptreferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ECLParser.RULE_eclconceptreference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 269;
	        this.conceptid();
	        this.state = 277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 270;
	            this.ws();
	            this.state = 271;
	            this.match(ECLParser.PIPE);
	            this.state = 272;
	            this.ws();
	            this.state = 273;
	            this.term();
	            this.state = 274;
	            this.ws();
	            this.state = 275;
	            this.match(ECLParser.PIPE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conceptid() {
	    let localctx = new ConceptidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ECLParser.RULE_conceptid);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 279;
	        this.sctid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	term() {
	    let localctx = new TermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ECLParser.RULE_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 282; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 281;
	        		this.nonwsnonpipe();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 284; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,17, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 298;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 287; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 286;
	                    this.sp();
	                    this.state = 289; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===5);
	                this.state = 292; 
	                this._errHandler.sync(this);
	                var _alt = 1;
	                do {
	                	switch (_alt) {
	                	case 1:
	                		this.state = 291;
	                		this.nonwsnonpipe();
	                		break;
	                	default:
	                		throw new antlr4.error.NoViableAltException(this);
	                	}
	                	this.state = 294; 
	                	this._errHandler.sync(this);
	                	_alt = this._interp.adaptivePredict(this._input,19, this._ctx);
	                } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER ); 
	            }
	            this.state = 300;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard() {
	    let localctx = new WildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ECLParser.RULE_wildcard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 301;
	        this.match(ECLParser.ASTERISK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintoperator() {
	    let localctx = new ConstraintoperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ECLParser.RULE_constraintoperator);
	    try {
	        this.state = 309;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 303;
	            this.childof();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 304;
	            this.descendantorselfof();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 305;
	            this.descendantof();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 306;
	            this.parentof();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 307;
	            this.ancestororselfof();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 308;
	            this.ancestorof();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descendantof() {
	    let localctx = new DescendantofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ECLParser.RULE_descendantof);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.state = 311;
	            this.match(ECLParser.LESS_THAN);
	            break;
	        case 41:
	        case 73:
	            this.state = 312;
	            _la = this._input.LA(1);
	            if(!(_la===41 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 313;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 314;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 315;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===72)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 316;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 317;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 318;
	            _la = this._input.LA(1);
	            if(!(_la===41 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 319;
	            _la = this._input.LA(1);
	            if(!(_la===38 || _la===70)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 320;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 321;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===89)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 322;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 323;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	descendantorselfof() {
	    let localctx = new DescendantorselfofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ECLParser.RULE_descendantorselfof);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 346;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.state = 326;
	            this.match(ECLParser.LESS_THAN);
	            this.state = 327;
	            this.match(ECLParser.LESS_THAN);
	            break;
	        case 41:
	        case 73:
	            this.state = 328;
	            _la = this._input.LA(1);
	            if(!(_la===41 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 329;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 330;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 331;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===72)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 332;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 333;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 334;
	            _la = this._input.LA(1);
	            if(!(_la===41 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 335;
	            _la = this._input.LA(1);
	            if(!(_la===38 || _la===70)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 336;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 337;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===89)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 338;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 339;
	            _la = this._input.LA(1);
	            if(!(_la===55 || _la===87)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 340;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 341;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 342;
	            _la = this._input.LA(1);
	            if(!(_la===49 || _la===81)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 343;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 344;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 345;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	childof() {
	    let localctx = new ChildofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ECLParser.RULE_childof);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 357;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.state = 348;
	            this.match(ECLParser.LESS_THAN);
	            this.state = 349;
	            this.match(ECLParser.EXCLAMATION);
	            break;
	        case 40:
	        case 72:
	            this.state = 350;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===72)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 351;
	            _la = this._input.LA(1);
	            if(!(_la===45 || _la===77)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 352;
	            _la = this._input.LA(1);
	            if(!(_la===46 || _la===78)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 353;
	            _la = this._input.LA(1);
	            if(!(_la===49 || _la===81)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 354;
	            _la = this._input.LA(1);
	            if(!(_la===41 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 355;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 356;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ancestorof() {
	    let localctx = new AncestorofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ECLParser.RULE_ancestorof);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 370;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.state = 359;
	            this.match(ECLParser.GREATER_THAN);
	            break;
	        case 38:
	        case 70:
	            this.state = 360;
	            _la = this._input.LA(1);
	            if(!(_la===38 || _la===70)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 361;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 362;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===72)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 363;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 364;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 365;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===89)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 366;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 367;
	            _la = this._input.LA(1);
	            if(!(_la===55 || _la===87)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 368;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 369;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ancestororselfof() {
	    let localctx = new AncestororselfofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, ECLParser.RULE_ancestororselfof);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 390;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.state = 372;
	            this.match(ECLParser.GREATER_THAN);
	            this.state = 373;
	            this.match(ECLParser.GREATER_THAN);
	            break;
	        case 38:
	        case 70:
	            this.state = 374;
	            _la = this._input.LA(1);
	            if(!(_la===38 || _la===70)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 375;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 376;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===72)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 377;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 378;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 379;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===89)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 380;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 381;
	            _la = this._input.LA(1);
	            if(!(_la===55 || _la===87)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 382;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 383;
	            _la = this._input.LA(1);
	            if(!(_la===55 || _la===87)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 384;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 385;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 386;
	            _la = this._input.LA(1);
	            if(!(_la===49 || _la===81)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 387;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 388;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 389;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parentof() {
	    let localctx = new ParentofContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, ECLParser.RULE_parentof);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 402;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 35:
	            this.state = 392;
	            this.match(ECLParser.GREATER_THAN);
	            this.state = 393;
	            this.match(ECLParser.EXCLAMATION);
	            break;
	        case 53:
	        case 85:
	            this.state = 394;
	            _la = this._input.LA(1);
	            if(!(_la===53 || _la===85)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 395;
	            _la = this._input.LA(1);
	            if(!(_la===38 || _la===70)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 396;
	            _la = this._input.LA(1);
	            if(!(_la===55 || _la===87)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 397;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 398;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 399;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===89)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 400;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 401;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conjunction() {
	    let localctx = new ConjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ECLParser.RULE_conjunction);
	    var _la = 0; // Token type
	    try {
	        this.state = 409;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 38:
	        case 70:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 404;
	            _la = this._input.LA(1);
	            if(!(_la===38 || _la===70)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 405;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 406;
	            _la = this._input.LA(1);
	            if(!(_la===41 || _la===73)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 407;
	            this.mws();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 408;
	            this.match(ECLParser.COMMA);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	disjunction() {
	    let localctx = new DisjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, ECLParser.RULE_disjunction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 411;
	        _la = this._input.LA(1);
	        if(!(_la===52 || _la===84)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 412;
	        _la = this._input.LA(1);
	        if(!(_la===55 || _la===87)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 413;
	        this.mws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusion() {
	    let localctx = new ExclusionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ECLParser.RULE_exclusion);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 415;
	        _la = this._input.LA(1);
	        if(!(_la===50 || _la===82)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 416;
	        _la = this._input.LA(1);
	        if(!(_la===46 || _la===78)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 417;
	        _la = this._input.LA(1);
	        if(!(_la===51 || _la===83)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 418;
	        _la = this._input.LA(1);
	        if(!(_la===58 || _la===90)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 419;
	        _la = this._input.LA(1);
	        if(!(_la===56 || _la===88)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 420;
	        this.mws();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclrefinement() {
	    let localctx = new EclrefinementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ECLParser.RULE_eclrefinement);
	    try {
	        this.state = 424;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 422;
	            this.subrefinement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 423;
	            this.compoundrefinementset();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundrefinementset() {
	    let localctx = new CompoundrefinementsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ECLParser.RULE_compoundrefinementset);
	    try {
	        this.state = 428;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 426;
	            this.conjunctionrefinementset();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 427;
	            this.disjunctionrefinementset();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conjunctionrefinementset() {
	    let localctx = new ConjunctionrefinementsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ECLParser.RULE_conjunctionrefinementset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 430;
	            this.subrefinement();
	            break;

	        case 2:
	            this.state = 431;
	            this.bracketcompoundrefinementset();
	            break;

	        }
	        this.state = 441; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 434;
	        		this.ws();
	        		this.state = 435;
	        		this.conjunction();
	        		this.state = 436;
	        		this.ws();
	        		this.state = 439;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 437;
	        		    this.subrefinement();
	        		    break;

	        		case 2:
	        		    this.state = 438;
	        		    this.bracketcompoundrefinementset();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 443; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,33, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	disjunctionrefinementset() {
	    let localctx = new DisjunctionrefinementsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ECLParser.RULE_disjunctionrefinementset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 445;
	            this.subrefinement();
	            break;

	        case 2:
	            this.state = 446;
	            this.bracketcompoundrefinementset();
	            break;

	        }
	        this.state = 456; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 449;
	        		this.ws();
	        		this.state = 450;
	        		this.disjunction();
	        		this.state = 451;
	        		this.ws();
	        		this.state = 454;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 452;
	        		    this.subrefinement();
	        		    break;

	        		case 2:
	        		    this.state = 453;
	        		    this.bracketcompoundrefinementset();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 458; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,36, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracketcompoundrefinementset() {
	    let localctx = new BracketcompoundrefinementsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ECLParser.RULE_bracketcompoundrefinementset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460;
	        this.match(ECLParser.LEFT_PAREN);
	        this.state = 461;
	        this.ws();
	        this.state = 462;
	        this.compoundrefinementset();
	        this.state = 463;
	        this.ws();
	        this.state = 464;
	        this.match(ECLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subrefinement() {
	    let localctx = new SubrefinementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ECLParser.RULE_subrefinement);
	    try {
	        this.state = 470;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 466;
	            this.compoundattributeset();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 467;
	            this.eclattributegroup();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 468;
	            this.bracketsubrefinement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 469;
	            this.eclattribute();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracketsubrefinement() {
	    let localctx = new BracketsubrefinementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ECLParser.RULE_bracketsubrefinement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 472;
	        this.match(ECLParser.LEFT_PAREN);
	        this.state = 473;
	        this.ws();
	        this.state = 474;
	        this.eclrefinement();
	        this.state = 475;
	        this.ws();
	        this.state = 476;
	        this.match(ECLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundattributeset() {
	    let localctx = new CompoundattributesetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ECLParser.RULE_compoundattributeset);
	    try {
	        this.state = 480;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 478;
	            this.conjunctionattributeset();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 479;
	            this.disjunctionattributeset();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conjunctionattributeset() {
	    let localctx = new ConjunctionattributesetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ECLParser.RULE_conjunctionattributeset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 482;
	            this.subattributeset();
	            break;

	        case 2:
	            this.state = 483;
	            this.bracketattributeset();
	            break;

	        }
	        this.state = 493; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 486;
	        		this.ws();
	        		this.state = 487;
	        		this.conjunction();
	        		this.state = 488;
	        		this.ws();
	        		this.state = 491;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 489;
	        		    this.subattributeset();
	        		    break;

	        		case 2:
	        		    this.state = 490;
	        		    this.bracketattributeset();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 495; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,41, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	disjunctionattributeset() {
	    let localctx = new DisjunctionattributesetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ECLParser.RULE_disjunctionattributeset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 497;
	            this.subattributeset();
	            break;

	        case 2:
	            this.state = 498;
	            this.bracketattributeset();
	            break;

	        }
	        this.state = 508; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 501;
	        		this.ws();
	        		this.state = 502;
	        		this.disjunction();
	        		this.state = 503;
	        		this.ws();
	        		this.state = 506;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        		switch(la_) {
	        		case 1:
	        		    this.state = 504;
	        		    this.subattributeset();
	        		    break;

	        		case 2:
	        		    this.state = 505;
	        		    this.bracketattributeset();
	        		    break;

	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 510; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,44, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracketattributeset() {
	    let localctx = new BracketattributesetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ECLParser.RULE_bracketattributeset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(ECLParser.LEFT_PAREN);
	        this.state = 513;
	        this.ws();
	        this.state = 514;
	        this.compoundattributeset();
	        this.state = 515;
	        this.ws();
	        this.state = 516;
	        this.match(ECLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subattributeset() {
	    let localctx = new SubattributesetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ECLParser.RULE_subattributeset);
	    try {
	        this.state = 520;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 33:
	        case 35:
	        case 38:
	        case 40:
	        case 41:
	        case 53:
	        case 55:
	        case 64:
	        case 67:
	        case 70:
	        case 72:
	        case 73:
	        case 77:
	        case 85:
	        case 87:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 518;
	            this.eclattribute();
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 519;
	            this.bracketattributeset();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclattributegroup() {
	    let localctx = new EclattributegroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ECLParser.RULE_eclattributegroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 525;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 522;
	            this.cardinality();
	            this.state = 523;
	            this.ws();
	        }

	        this.state = 527;
	        this.match(ECLParser.LEFT_CURLY_BRACE);
	        this.state = 528;
	        this.ws();
	        this.state = 531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 529;
	            this.compoundattributeset();
	            break;

	        case 2:
	            this.state = 530;
	            this.eclattribute();
	            break;

	        }
	        this.state = 533;
	        this.ws();
	        this.state = 534;
	        this.match(ECLParser.RIGHT_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclattribute() {
	    let localctx = new EclattributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ECLParser.RULE_eclattribute);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 536;
	            this.cardinality();
	            this.state = 537;
	            this.ws();
	        }

	        this.state = 544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===55 || _la===87) {
	            this.state = 541;
	            this.reverseflag();
	            this.state = 542;
	            this.ws();
	        }

	        this.state = 546;
	        this.subexpressionconstraint();
	        this.state = 547;
	        this.ws();
	        this.state = 551;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 548;
	            this.eclattributeexpressionvalue();
	            break;

	        case 2:
	            this.state = 549;
	            this.eclattributenumbervalue();
	            break;

	        case 3:
	            this.state = 550;
	            this.eclattributestringvalue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclattributestringvalue() {
	    let localctx = new EclattributestringvalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ECLParser.RULE_eclattributestringvalue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 553;
	        this.stringcomparisonoperator();
	        this.state = 554;
	        this.ws();
	        this.state = 555;
	        this.qm();
	        this.state = 556;
	        this.stringvalue();
	        this.state = 557;
	        this.qm();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclattributenumbervalue() {
	    let localctx = new EclattributenumbervalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, ECLParser.RULE_eclattributenumbervalue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 559;
	        this.numericcomparisonoperator();
	        this.state = 560;
	        this.ws();
	        this.state = 561;
	        this.match(ECLParser.POUND);
	        this.state = 562;
	        this.numericvalue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eclattributeexpressionvalue() {
	    let localctx = new EclattributeexpressionvalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ECLParser.RULE_eclattributeexpressionvalue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this.expressioncomparisonoperator();
	        this.state = 565;
	        this.ws();
	        this.state = 568;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 33:
	        case 35:
	        case 38:
	        case 40:
	        case 41:
	        case 53:
	        case 67:
	        case 70:
	        case 72:
	        case 73:
	        case 77:
	        case 85:
	            this.state = 566;
	            this.subexpressionconstraint();
	            break;
	        case 13:
	            this.state = 567;
	            this.bracketcompoundexpressionconstraint();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardinality() {
	    let localctx = new CardinalityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, ECLParser.RULE_cardinality);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        this.match(ECLParser.LEFT_BRACE);
	        this.state = 571;
	        this.minvalue();
	        this.state = 572;
	        this.to();
	        this.state = 573;
	        this.maxvalue();
	        this.state = 574;
	        this.match(ECLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minvalue() {
	    let localctx = new MinvalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, ECLParser.RULE_minvalue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 576;
	        this.nonnegativeintegervalue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	to() {
	    let localctx = new ToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, ECLParser.RULE_to);
	    var _la = 0; // Token type
	    try {
	        this.state = 585;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 578;
	            this.match(ECLParser.PERIOD);
	            this.state = 579;
	            this.match(ECLParser.PERIOD);
	            break;
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 580;
	            this.mws();
	            this.state = 581;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===89)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 582;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 583;
	            this.mws();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maxvalue() {
	    let localctx = new MaxvalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, ECLParser.RULE_maxvalue);
	    try {
	        this.state = 589;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 587;
	            this.nonnegativeintegervalue();
	            break;
	        case 15:
	        case 50:
	        case 82:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 588;
	            this.many();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	many() {
	    let localctx = new ManyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, ECLParser.RULE_many);
	    var _la = 0; // Token type
	    try {
	        this.state = 596;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 591;
	            this.match(ECLParser.ASTERISK);
	            break;
	        case 50:
	        case 82:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 592;
	            _la = this._input.LA(1);
	            if(!(_la===50 || _la===82)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 593;
	            _la = this._input.LA(1);
	            if(!(_la===38 || _la===70)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 594;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 595;
	            _la = this._input.LA(1);
	            if(!(_la===62 || _la===94)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reverseflag() {
	    let localctx = new ReverseflagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, ECLParser.RULE_reverseflag);
	    var _la = 0; // Token type
	    try {
	        this.state = 609;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 598;
	            _la = this._input.LA(1);
	            if(!(_la===55 || _la===87)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 599;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 600;
	            _la = this._input.LA(1);
	            if(!(_la===59 || _la===91)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 601;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 602;
	            _la = this._input.LA(1);
	            if(!(_la===55 || _la===87)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 603;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===88)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 604;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 605;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 606;
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 607;
	            _la = this._input.LA(1);
	            if(!(_la===55 || _la===87)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 608;
	            this.mws();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressioncomparisonoperator() {
	    let localctx = new ExpressioncomparisonoperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, ECLParser.RULE_expressioncomparisonoperator);
	    var _la = 0; // Token type
	    try {
	        this.state = 620;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 611;
	            this.match(ECLParser.EQUALS);
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 612;
	            this.match(ECLParser.EXCLAMATION);
	            this.state = 613;
	            this.match(ECLParser.EQUALS);
	            break;
	        case 51:
	        case 83:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 614;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 615;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 616;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===89)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 617;
	            this.mws();
	            this.state = 618;
	            this.match(ECLParser.EQUALS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericcomparisonoperator() {
	    let localctx = new NumericcomparisonoperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, ECLParser.RULE_numericcomparisonoperator);
	    var _la = 0; // Token type
	    try {
	        this.state = 637;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 622;
	            this.match(ECLParser.EQUALS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 623;
	            this.match(ECLParser.EXCLAMATION);
	            this.state = 624;
	            this.match(ECLParser.EQUALS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 625;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 626;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 627;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===89)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 628;
	            this.mws();
	            this.state = 629;
	            this.match(ECLParser.EQUALS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 631;
	            this.match(ECLParser.LESS_THAN);
	            this.state = 632;
	            this.match(ECLParser.EQUALS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 633;
	            this.match(ECLParser.LESS_THAN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 634;
	            this.match(ECLParser.GREATER_THAN);
	            this.state = 635;
	            this.match(ECLParser.EQUALS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 636;
	            this.match(ECLParser.GREATER_THAN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringcomparisonoperator() {
	    let localctx = new StringcomparisonoperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, ECLParser.RULE_stringcomparisonoperator);
	    var _la = 0; // Token type
	    try {
	        this.state = 648;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 639;
	            this.match(ECLParser.EQUALS);
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 640;
	            this.match(ECLParser.EXCLAMATION);
	            this.state = 641;
	            this.match(ECLParser.EQUALS);
	            break;
	        case 51:
	        case 83:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 642;
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===83)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 643;
	            _la = this._input.LA(1);
	            if(!(_la===52 || _la===84)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 644;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===89)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 645;
	            this.mws();
	            this.state = 646;
	            this.match(ECLParser.EQUALS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericvalue() {
	    let localctx = new NumericvalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, ECLParser.RULE_numericvalue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===16 || _la===18) {
	            this.state = 650;
	            _la = this._input.LA(1);
	            if(!(_la===16 || _la===18)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 655;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 653;
	            this.decimalvalue();
	            break;

	        case 2:
	            this.state = 654;
	            this.integervalue();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringvalue() {
	    let localctx = new StringvalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, ECLParser.RULE_stringvalue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 659; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 659;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 6:
	            case 8:
	            case 9:
	            case 10:
	            case 11:
	            case 12:
	            case 13:
	            case 14:
	            case 15:
	            case 16:
	            case 17:
	            case 18:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 24:
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 44:
	            case 45:
	            case 46:
	            case 47:
	            case 48:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 97:
	            case 98:
	            case 99:
	                this.state = 657;
	                this.anynonescapedchar();
	                break;
	            case 65:
	                this.state = 658;
	                this.escapedchar();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 661; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & 4294967166) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & 15) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integervalue() {
	    let localctx = new IntegervalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, ECLParser.RULE_integervalue);
	    var _la = 0; // Token type
	    try {
	        this.state = 671;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 663;
	            this.digitnonzero();
	            this.state = 667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & 2145386496) !== 0)) {
	                this.state = 664;
	                this.digit();
	                this.state = 669;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 670;
	            this.zero();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalvalue() {
	    let localctx = new DecimalvalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, ECLParser.RULE_decimalvalue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this.integervalue();
	        this.state = 674;
	        this.match(ECLParser.PERIOD);
	        this.state = 676; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 675;
	            this.digit();
	            this.state = 678; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & 2145386496) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonnegativeintegervalue() {
	    let localctx = new NonnegativeintegervalueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, ECLParser.RULE_nonnegativeintegervalue);
	    var _la = 0; // Token type
	    try {
	        this.state = 688;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 680;
	            this.digitnonzero();
	            this.state = 684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & 2145386496) !== 0)) {
	                this.state = 681;
	                this.digit();
	                this.state = 686;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 687;
	            this.zero();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sctid() {
	    let localctx = new SctidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, ECLParser.RULE_sctid);
	    var _la = 0; // Token type
	    try {
	        this.state = 798;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 690;
	            this.match(ECLParser.H);
	            this.state = 691;
	            this.match(ECLParser.T);
	            this.state = 692;
	            this.match(ECLParser.T);
	            this.state = 693;
	            this.match(ECLParser.P);
	            this.state = 695; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 694;
	            		this.nonspacechar();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 697; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,68, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 699;
	            this.digitnonzero();

	            this.state = 700;
	            this.digit();

	            this.state = 701;
	            this.digit();

	            this.state = 702;
	            this.digit();

	            this.state = 703;
	            this.digit();

	            this.state = 704;
	            this.digit();
	            this.state = 796;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 706;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & 2145386496) !== 0)) {
	                    this.state = 705;
	                    this.digit();
	                }

	                break;

	            case 2:
	                this.state = 708;
	                this.digit();

	                this.state = 709;
	                this.digit();
	                break;

	            case 3:
	                this.state = 711;
	                this.digit();

	                this.state = 712;
	                this.digit();

	                this.state = 713;
	                this.digit();
	                break;

	            case 4:
	                this.state = 715;
	                this.digit();

	                this.state = 716;
	                this.digit();

	                this.state = 717;
	                this.digit();

	                this.state = 718;
	                this.digit();
	                break;

	            case 5:
	                this.state = 720;
	                this.digit();

	                this.state = 721;
	                this.digit();

	                this.state = 722;
	                this.digit();

	                this.state = 723;
	                this.digit();

	                this.state = 724;
	                this.digit();
	                break;

	            case 6:
	                this.state = 726;
	                this.digit();

	                this.state = 727;
	                this.digit();

	                this.state = 728;
	                this.digit();

	                this.state = 729;
	                this.digit();

	                this.state = 730;
	                this.digit();

	                this.state = 731;
	                this.digit();
	                break;

	            case 7:
	                this.state = 733;
	                this.digit();

	                this.state = 734;
	                this.digit();

	                this.state = 735;
	                this.digit();

	                this.state = 736;
	                this.digit();

	                this.state = 737;
	                this.digit();

	                this.state = 738;
	                this.digit();

	                this.state = 739;
	                this.digit();
	                break;

	            case 8:
	                this.state = 741;
	                this.digit();

	                this.state = 742;
	                this.digit();

	                this.state = 743;
	                this.digit();

	                this.state = 744;
	                this.digit();

	                this.state = 745;
	                this.digit();

	                this.state = 746;
	                this.digit();

	                this.state = 747;
	                this.digit();

	                this.state = 748;
	                this.digit();
	                break;

	            case 9:
	                this.state = 750;
	                this.digit();

	                this.state = 751;
	                this.digit();

	                this.state = 752;
	                this.digit();

	                this.state = 753;
	                this.digit();

	                this.state = 754;
	                this.digit();

	                this.state = 755;
	                this.digit();

	                this.state = 756;
	                this.digit();

	                this.state = 757;
	                this.digit();

	                this.state = 758;
	                this.digit();
	                break;

	            case 10:
	                this.state = 760;
	                this.digit();

	                this.state = 761;
	                this.digit();

	                this.state = 762;
	                this.digit();

	                this.state = 763;
	                this.digit();

	                this.state = 764;
	                this.digit();

	                this.state = 765;
	                this.digit();

	                this.state = 766;
	                this.digit();

	                this.state = 767;
	                this.digit();

	                this.state = 768;
	                this.digit();

	                this.state = 769;
	                this.digit();
	                break;

	            case 11:
	                this.state = 771;
	                this.digit();

	                this.state = 772;
	                this.digit();

	                this.state = 773;
	                this.digit();

	                this.state = 774;
	                this.digit();

	                this.state = 775;
	                this.digit();

	                this.state = 776;
	                this.digit();

	                this.state = 777;
	                this.digit();

	                this.state = 778;
	                this.digit();

	                this.state = 779;
	                this.digit();

	                this.state = 780;
	                this.digit();

	                this.state = 781;
	                this.digit();
	                break;

	            case 12:
	                this.state = 783;
	                this.digit();

	                this.state = 784;
	                this.digit();

	                this.state = 785;
	                this.digit();

	                this.state = 786;
	                this.digit();

	                this.state = 787;
	                this.digit();

	                this.state = 788;
	                this.digit();

	                this.state = 789;
	                this.digit();

	                this.state = 790;
	                this.digit();

	                this.state = 791;
	                this.digit();

	                this.state = 792;
	                this.digit();

	                this.state = 793;
	                this.digit();

	                this.state = 794;
	                this.digit();
	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ws() {
	    let localctx = new WsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, ECLParser.RULE_ws);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,73,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 805;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 5:
	                    this.state = 800;
	                    this.sp();
	                    break;
	                case 2:
	                    this.state = 801;
	                    this.htab();
	                    break;
	                case 4:
	                    this.state = 802;
	                    this.cr();
	                    break;
	                case 3:
	                    this.state = 803;
	                    this.lf();
	                    break;
	                case 20:
	                    this.state = 804;
	                    this.comment();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 809;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,73,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mws() {
	    let localctx = new MwsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, ECLParser.RULE_mws);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 815;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case 5:
	        		    this.state = 810;
	        		    this.sp();
	        		    break;
	        		case 2:
	        		    this.state = 811;
	        		    this.htab();
	        		    break;
	        		case 4:
	        		    this.state = 812;
	        		    this.cr();
	        		    break;
	        		case 3:
	        		    this.state = 813;
	        		    this.lf();
	        		    break;
	        		case 20:
	        		    this.state = 814;
	        		    this.comment();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 817; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,75, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comment() {
	    let localctx = new CommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, ECLParser.RULE_comment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 819;
	        this.match(ECLParser.SLASH);
	        this.state = 820;
	        this.match(ECLParser.ASTERISK);
	        this.state = 826;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 824;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 1:
	                case 2:
	                case 3:
	                case 4:
	                case 5:
	                case 6:
	                case 7:
	                case 8:
	                case 9:
	                case 10:
	                case 11:
	                case 12:
	                case 13:
	                case 14:
	                case 16:
	                case 17:
	                case 18:
	                case 19:
	                case 20:
	                case 21:
	                case 22:
	                case 23:
	                case 24:
	                case 25:
	                case 26:
	                case 27:
	                case 28:
	                case 29:
	                case 30:
	                case 31:
	                case 32:
	                case 33:
	                case 34:
	                case 35:
	                case 36:
	                case 37:
	                case 38:
	                case 39:
	                case 40:
	                case 41:
	                case 42:
	                case 43:
	                case 44:
	                case 45:
	                case 46:
	                case 47:
	                case 48:
	                case 49:
	                case 50:
	                case 51:
	                case 52:
	                case 53:
	                case 54:
	                case 55:
	                case 56:
	                case 57:
	                case 58:
	                case 59:
	                case 60:
	                case 61:
	                case 62:
	                case 63:
	                case 64:
	                case 65:
	                case 66:
	                case 67:
	                case 68:
	                case 69:
	                case 70:
	                case 71:
	                case 72:
	                case 73:
	                case 74:
	                case 75:
	                case 76:
	                case 77:
	                case 78:
	                case 79:
	                case 80:
	                case 81:
	                case 82:
	                case 83:
	                case 84:
	                case 85:
	                case 86:
	                case 87:
	                case 88:
	                case 89:
	                case 90:
	                case 91:
	                case 92:
	                case 93:
	                case 94:
	                case 95:
	                case 96:
	                case 97:
	                case 98:
	                case 99:
	                    this.state = 822;
	                    this.nonstarchar();
	                    break;
	                case 15:
	                    this.state = 823;
	                    this.starwithnonfslash();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 828;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
	        }

	        this.state = 829;
	        this.match(ECLParser.ASTERISK);
	        this.state = 830;
	        this.match(ECLParser.SLASH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonstarchar() {
	    let localctx = new NonstarcharContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, ECLParser.RULE_nonstarchar);
	    var _la = 0; // Token type
	    try {
	        this.state = 839;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 832;
	            this.sp();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 833;
	            this.htab();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 834;
	            this.cr();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 835;
	            this.lf();
	            break;
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 836;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 32704) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 837;
	            _la = this._input.LA(1);
	            if(!(((((_la - 16)) & ~0x1f) == 0 && ((1 << (_la - 16)) & 4294967295) !== 0) || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & 4294967295) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & 1048575) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 838;
	            this.match(ECLParser.UTF8_LETTER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonspacechar() {
	    let localctx = new NonspacecharContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, ECLParser.RULE_nonspacechar);
	    var _la = 0; // Token type
	    try {
	        this.state = 844;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 841;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 32512) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 842;
	            _la = this._input.LA(1);
	            if(!(((((_la - 16)) & ~0x1f) == 0 && ((1 << (_la - 16)) & 4294967295) !== 0) || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & 4294967295) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & 1048575) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 843;
	            this.match(ECLParser.UTF8_LETTER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	starwithnonfslash() {
	    let localctx = new StarwithnonfslashContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, ECLParser.RULE_starwithnonfslash);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        this.match(ECLParser.ASTERISK);
	        this.state = 847;
	        this.nonfslash();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonfslash() {
	    let localctx = new NonfslashContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, ECLParser.RULE_nonfslash);
	    var _la = 0; // Token type
	    try {
	        this.state = 856;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 849;
	            this.sp();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 850;
	            this.htab();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 851;
	            this.cr();
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 852;
	            this.lf();
	            break;
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 853;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 1048512) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 854;
	            _la = this._input.LA(1);
	            if(!(((((_la - 21)) & ~0x1f) == 0 && ((1 << (_la - 21)) & 4294967295) !== 0) || ((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & 4294967295) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & 32767) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 855;
	            this.match(ECLParser.UTF8_LETTER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sp() {
	    let localctx = new SpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, ECLParser.RULE_sp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        this.match(ECLParser.SPACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	htab() {
	    let localctx = new HtabContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, ECLParser.RULE_htab);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 860;
	        this.match(ECLParser.TAB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cr() {
	    let localctx = new CrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, ECLParser.RULE_cr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.match(ECLParser.CR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lf() {
	    let localctx = new LfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, ECLParser.RULE_lf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 864;
	        this.match(ECLParser.LF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qm() {
	    let localctx = new QmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, ECLParser.RULE_qm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 866;
	        this.match(ECLParser.QUOTE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bs() {
	    let localctx = new BsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, ECLParser.RULE_bs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 868;
	        this.match(ECLParser.BACKSLASH);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	digit() {
	    let localctx = new DigitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, ECLParser.RULE_digit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 870;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 2145386496) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	zero() {
	    let localctx = new ZeroContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, ECLParser.RULE_zero);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 872;
	        this.match(ECLParser.ZERO);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	digitnonzero() {
	    let localctx = new DigitnonzeroContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, ECLParser.RULE_digitnonzero);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 874;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 2143289344) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonwsnonpipe() {
	    let localctx = new NonwsnonpipeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, ECLParser.RULE_nonwsnonpipe);
	    var _la = 0; // Token type
	    try {
	        this.state = 879;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 876;
	            _la = this._input.LA(1);
	            if(!(((((_la - 6)) & ~0x1f) == 0 && ((1 << (_la - 6)) & 4294967295) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & 4294967295) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & 134217727) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 98:
	        case 99:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 877;
	            _la = this._input.LA(1);
	            if(!(_la===98 || _la===99)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 878;
	            this.match(ECLParser.UTF8_LETTER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anynonescapedchar() {
	    let localctx = new AnynonescapedcharContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, ECLParser.RULE_anynonescapedchar);
	    var _la = 0; // Token type
	    try {
	        this.state = 889;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 881;
	            this.sp();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 882;
	            this.htab();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 883;
	            this.cr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 884;
	            this.lf();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 885;
	            _la = this._input.LA(1);
	            if(!(_la===5 || _la===6)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 886;
	            _la = this._input.LA(1);
	            if(!(((((_la - 8)) & ~0x1f) == 0 && ((1 << (_la - 8)) & 4294967295) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & 33554431) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 887;
	            _la = this._input.LA(1);
	            if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & 4294967295) !== 0) || _la===98 || _la===99)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 888;
	            this.match(ECLParser.UTF8_LETTER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	escapedchar() {
	    let localctx = new EscapedcharContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, ECLParser.RULE_escapedchar);
	    try {
	        this.state = 897;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 891;
	            this.bs();
	            this.state = 892;
	            this.qm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 894;
	            this.bs();
	            this.state = 895;
	            this.bs();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ECLParser.EOF = antlr4.Token.EOF;
ECLParser.UTF8_LETTER = 1;
ECLParser.TAB = 2;
ECLParser.LF = 3;
ECLParser.CR = 4;
ECLParser.SPACE = 5;
ECLParser.EXCLAMATION = 6;
ECLParser.QUOTE = 7;
ECLParser.POUND = 8;
ECLParser.DOLLAR = 9;
ECLParser.PERCENT = 10;
ECLParser.AMPERSAND = 11;
ECLParser.APOSTROPHE = 12;
ECLParser.LEFT_PAREN = 13;
ECLParser.RIGHT_PAREN = 14;
ECLParser.ASTERISK = 15;
ECLParser.PLUS = 16;
ECLParser.COMMA = 17;
ECLParser.DASH = 18;
ECLParser.PERIOD = 19;
ECLParser.SLASH = 20;
ECLParser.ZERO = 21;
ECLParser.ONE = 22;
ECLParser.TWO = 23;
ECLParser.THREE = 24;
ECLParser.FOUR = 25;
ECLParser.FIVE = 26;
ECLParser.SIX = 27;
ECLParser.SEVEN = 28;
ECLParser.EIGHT = 29;
ECLParser.NINE = 30;
ECLParser.COLON = 31;
ECLParser.SEMICOLON = 32;
ECLParser.LESS_THAN = 33;
ECLParser.EQUALS = 34;
ECLParser.GREATER_THAN = 35;
ECLParser.QUESTION = 36;
ECLParser.AT = 37;
ECLParser.CAP_A = 38;
ECLParser.CAP_B = 39;
ECLParser.CAP_C = 40;
ECLParser.CAP_D = 41;
ECLParser.CAP_E = 42;
ECLParser.CAP_F = 43;
ECLParser.CAP_G = 44;
ECLParser.CAP_H = 45;
ECLParser.CAP_I = 46;
ECLParser.CAP_J = 47;
ECLParser.CAP_K = 48;
ECLParser.CAP_L = 49;
ECLParser.CAP_M = 50;
ECLParser.CAP_N = 51;
ECLParser.CAP_O = 52;
ECLParser.CAP_P = 53;
ECLParser.CAP_Q = 54;
ECLParser.CAP_R = 55;
ECLParser.CAP_S = 56;
ECLParser.CAP_T = 57;
ECLParser.CAP_U = 58;
ECLParser.CAP_V = 59;
ECLParser.CAP_W = 60;
ECLParser.CAP_X = 61;
ECLParser.CAP_Y = 62;
ECLParser.CAP_Z = 63;
ECLParser.LEFT_BRACE = 64;
ECLParser.BACKSLASH = 65;
ECLParser.RIGHT_BRACE = 66;
ECLParser.CARAT = 67;
ECLParser.UNDERSCORE = 68;
ECLParser.ACCENT = 69;
ECLParser.A = 70;
ECLParser.B = 71;
ECLParser.C = 72;
ECLParser.D = 73;
ECLParser.E = 74;
ECLParser.F = 75;
ECLParser.G = 76;
ECLParser.H = 77;
ECLParser.I = 78;
ECLParser.J = 79;
ECLParser.K = 80;
ECLParser.L = 81;
ECLParser.M = 82;
ECLParser.N = 83;
ECLParser.O = 84;
ECLParser.P = 85;
ECLParser.Q = 86;
ECLParser.R = 87;
ECLParser.S = 88;
ECLParser.T = 89;
ECLParser.U = 90;
ECLParser.V = 91;
ECLParser.W = 92;
ECLParser.X = 93;
ECLParser.Y = 94;
ECLParser.Z = 95;
ECLParser.LEFT_CURLY_BRACE = 96;
ECLParser.PIPE = 97;
ECLParser.RIGHT_CURLY_BRACE = 98;
ECLParser.TILDE = 99;

ECLParser.RULE_ecl = 0;
ECLParser.RULE_expressionconstraint = 1;
ECLParser.RULE_refinedexpressionconstraint = 2;
ECLParser.RULE_compoundexpressionconstraint = 3;
ECLParser.RULE_conjunctionexpressionconstraint = 4;
ECLParser.RULE_disjunctionexpressionconstraint = 5;
ECLParser.RULE_exclusionexpressionconstraint = 6;
ECLParser.RULE_bracketcompoundexpressionconstraint = 7;
ECLParser.RULE_dottedexpressionconstraint = 8;
ECLParser.RULE_dottedexpressionattribute = 9;
ECLParser.RULE_subexpressionconstraint = 10;
ECLParser.RULE_eclfocusconcept = 11;
ECLParser.RULE_dot = 12;
ECLParser.RULE_memberof = 13;
ECLParser.RULE_eclconceptreference = 14;
ECLParser.RULE_conceptid = 15;
ECLParser.RULE_term = 16;
ECLParser.RULE_wildcard = 17;
ECLParser.RULE_constraintoperator = 18;
ECLParser.RULE_descendantof = 19;
ECLParser.RULE_descendantorselfof = 20;
ECLParser.RULE_childof = 21;
ECLParser.RULE_ancestorof = 22;
ECLParser.RULE_ancestororselfof = 23;
ECLParser.RULE_parentof = 24;
ECLParser.RULE_conjunction = 25;
ECLParser.RULE_disjunction = 26;
ECLParser.RULE_exclusion = 27;
ECLParser.RULE_eclrefinement = 28;
ECLParser.RULE_compoundrefinementset = 29;
ECLParser.RULE_conjunctionrefinementset = 30;
ECLParser.RULE_disjunctionrefinementset = 31;
ECLParser.RULE_bracketcompoundrefinementset = 32;
ECLParser.RULE_subrefinement = 33;
ECLParser.RULE_bracketsubrefinement = 34;
ECLParser.RULE_compoundattributeset = 35;
ECLParser.RULE_conjunctionattributeset = 36;
ECLParser.RULE_disjunctionattributeset = 37;
ECLParser.RULE_bracketattributeset = 38;
ECLParser.RULE_subattributeset = 39;
ECLParser.RULE_eclattributegroup = 40;
ECLParser.RULE_eclattribute = 41;
ECLParser.RULE_eclattributestringvalue = 42;
ECLParser.RULE_eclattributenumbervalue = 43;
ECLParser.RULE_eclattributeexpressionvalue = 44;
ECLParser.RULE_cardinality = 45;
ECLParser.RULE_minvalue = 46;
ECLParser.RULE_to = 47;
ECLParser.RULE_maxvalue = 48;
ECLParser.RULE_many = 49;
ECLParser.RULE_reverseflag = 50;
ECLParser.RULE_expressioncomparisonoperator = 51;
ECLParser.RULE_numericcomparisonoperator = 52;
ECLParser.RULE_stringcomparisonoperator = 53;
ECLParser.RULE_numericvalue = 54;
ECLParser.RULE_stringvalue = 55;
ECLParser.RULE_integervalue = 56;
ECLParser.RULE_decimalvalue = 57;
ECLParser.RULE_nonnegativeintegervalue = 58;
ECLParser.RULE_sctid = 59;
ECLParser.RULE_ws = 60;
ECLParser.RULE_mws = 61;
ECLParser.RULE_comment = 62;
ECLParser.RULE_nonstarchar = 63;
ECLParser.RULE_nonspacechar = 64;
ECLParser.RULE_starwithnonfslash = 65;
ECLParser.RULE_nonfslash = 66;
ECLParser.RULE_sp = 67;
ECLParser.RULE_htab = 68;
ECLParser.RULE_cr = 69;
ECLParser.RULE_lf = 70;
ECLParser.RULE_qm = 71;
ECLParser.RULE_bs = 72;
ECLParser.RULE_digit = 73;
ECLParser.RULE_zero = 74;
ECLParser.RULE_digitnonzero = 75;
ECLParser.RULE_nonwsnonpipe = 76;
ECLParser.RULE_anynonescapedchar = 77;
ECLParser.RULE_escapedchar = 78;

class EclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_ecl;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	expressionconstraint() {
	    return this.getTypedRuleContext(ExpressionconstraintContext,0);
	};

	EOF() {
	    return this.getToken(ECLParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEcl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEcl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEcl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_expressionconstraint;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	refinedexpressionconstraint() {
	    return this.getTypedRuleContext(RefinedexpressionconstraintContext,0);
	};

	compoundexpressionconstraint() {
	    return this.getTypedRuleContext(CompoundexpressionconstraintContext,0);
	};

	dottedexpressionconstraint() {
	    return this.getTypedRuleContext(DottedexpressionconstraintContext,0);
	};

	subexpressionconstraint() {
	    return this.getTypedRuleContext(SubexpressionconstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterExpressionconstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitExpressionconstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitExpressionconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefinedexpressionconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_refinedexpressionconstraint;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	COLON() {
	    return this.getToken(ECLParser.COLON, 0);
	};

	eclrefinement() {
	    return this.getTypedRuleContext(EclrefinementContext,0);
	};

	subexpressionconstraint() {
	    return this.getTypedRuleContext(SubexpressionconstraintContext,0);
	};

	bracketcompoundexpressionconstraint() {
	    return this.getTypedRuleContext(BracketcompoundexpressionconstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterRefinedexpressionconstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitRefinedexpressionconstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitRefinedexpressionconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompoundexpressionconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_compoundexpressionconstraint;
    }

	conjunctionexpressionconstraint() {
	    return this.getTypedRuleContext(ConjunctionexpressionconstraintContext,0);
	};

	disjunctionexpressionconstraint() {
	    return this.getTypedRuleContext(DisjunctionexpressionconstraintContext,0);
	};

	exclusionexpressionconstraint() {
	    return this.getTypedRuleContext(ExclusionexpressionconstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterCompoundexpressionconstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitCompoundexpressionconstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitCompoundexpressionconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConjunctionexpressionconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_conjunctionexpressionconstraint;
    }

	subexpressionconstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubexpressionconstraintContext);
	    } else {
	        return this.getTypedRuleContext(SubexpressionconstraintContext,i);
	    }
	};

	bracketcompoundexpressionconstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BracketcompoundexpressionconstraintContext);
	    } else {
	        return this.getTypedRuleContext(BracketcompoundexpressionconstraintContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	conjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConjunctionContext);
	    } else {
	        return this.getTypedRuleContext(ConjunctionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterConjunctionexpressionconstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitConjunctionexpressionconstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitConjunctionexpressionconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DisjunctionexpressionconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_disjunctionexpressionconstraint;
    }

	subexpressionconstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubexpressionconstraintContext);
	    } else {
	        return this.getTypedRuleContext(SubexpressionconstraintContext,i);
	    }
	};

	bracketcompoundexpressionconstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BracketcompoundexpressionconstraintContext);
	    } else {
	        return this.getTypedRuleContext(BracketcompoundexpressionconstraintContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	disjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisjunctionContext);
	    } else {
	        return this.getTypedRuleContext(DisjunctionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDisjunctionexpressionconstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDisjunctionexpressionconstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDisjunctionexpressionconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExclusionexpressionconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_exclusionexpressionconstraint;
    }

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	exclusion() {
	    return this.getTypedRuleContext(ExclusionContext,0);
	};

	subexpressionconstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubexpressionconstraintContext);
	    } else {
	        return this.getTypedRuleContext(SubexpressionconstraintContext,i);
	    }
	};

	bracketcompoundexpressionconstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BracketcompoundexpressionconstraintContext);
	    } else {
	        return this.getTypedRuleContext(BracketcompoundexpressionconstraintContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterExclusionexpressionconstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitExclusionexpressionconstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitExclusionexpressionconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BracketcompoundexpressionconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_bracketcompoundexpressionconstraint;
    }

	LEFT_PAREN() {
	    return this.getToken(ECLParser.LEFT_PAREN, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(ECLParser.RIGHT_PAREN, 0);
	};

	refinedexpressionconstraint() {
	    return this.getTypedRuleContext(RefinedexpressionconstraintContext,0);
	};

	compoundexpressionconstraint() {
	    return this.getTypedRuleContext(CompoundexpressionconstraintContext,0);
	};

	subexpressionconstraint() {
	    return this.getTypedRuleContext(SubexpressionconstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterBracketcompoundexpressionconstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitBracketcompoundexpressionconstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitBracketcompoundexpressionconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DottedexpressionconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_dottedexpressionconstraint;
    }

	subexpressionconstraint() {
	    return this.getTypedRuleContext(SubexpressionconstraintContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	dottedexpressionattribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedexpressionattributeContext);
	    } else {
	        return this.getTypedRuleContext(DottedexpressionattributeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDottedexpressionconstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDottedexpressionconstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDottedexpressionconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DottedexpressionattributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_dottedexpressionattribute;
    }

	dot() {
	    return this.getTypedRuleContext(DotContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	subexpressionconstraint() {
	    return this.getTypedRuleContext(SubexpressionconstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDottedexpressionattribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDottedexpressionattribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDottedexpressionattribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubexpressionconstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_subexpressionconstraint;
    }

	eclfocusconcept() {
	    return this.getTypedRuleContext(EclfocusconceptContext,0);
	};

	constraintoperator() {
	    return this.getTypedRuleContext(ConstraintoperatorContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	memberof() {
	    return this.getTypedRuleContext(MemberofContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterSubexpressionconstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitSubexpressionconstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitSubexpressionconstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclfocusconceptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_eclfocusconcept;
    }

	eclconceptreference() {
	    return this.getTypedRuleContext(EclconceptreferenceContext,0);
	};

	wildcard() {
	    return this.getTypedRuleContext(WildcardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEclfocusconcept(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEclfocusconcept(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEclfocusconcept(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_dot;
    }

	PERIOD() {
	    return this.getToken(ECLParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDot(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_memberof;
    }

	CARAT() {
	    return this.getToken(ECLParser.CARAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterMemberof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitMemberof(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitMemberof(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclconceptreferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_eclconceptreference;
    }

	conceptid() {
	    return this.getTypedRuleContext(ConceptidContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.PIPE);
	    } else {
	        return this.getToken(ECLParser.PIPE, i);
	    }
	};


	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEclconceptreference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEclconceptreference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEclconceptreference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConceptidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_conceptid;
    }

	sctid() {
	    return this.getTypedRuleContext(SctidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterConceptid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitConceptid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitConceptid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_term;
    }

	nonwsnonpipe = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NonwsnonpipeContext);
	    } else {
	        return this.getTypedRuleContext(NonwsnonpipeContext,i);
	    }
	};

	sp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpContext);
	    } else {
	        return this.getTypedRuleContext(SpContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_wildcard;
    }

	ASTERISK() {
	    return this.getToken(ECLParser.ASTERISK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitWildcard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitWildcard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintoperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_constraintoperator;
    }

	childof() {
	    return this.getTypedRuleContext(ChildofContext,0);
	};

	descendantorselfof() {
	    return this.getTypedRuleContext(DescendantorselfofContext,0);
	};

	descendantof() {
	    return this.getTypedRuleContext(DescendantofContext,0);
	};

	parentof() {
	    return this.getTypedRuleContext(ParentofContext,0);
	};

	ancestororselfof() {
	    return this.getTypedRuleContext(AncestororselfofContext,0);
	};

	ancestorof() {
	    return this.getTypedRuleContext(AncestorofContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterConstraintoperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitConstraintoperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitConstraintoperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescendantofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_descendantof;
    }

	LESS_THAN() {
	    return this.getToken(ECLParser.LESS_THAN, 0);
	};

	D = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.D);
	    } else {
	        return this.getToken(ECLParser.D, i);
	    }
	};


	CAP_D = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_D);
	    } else {
	        return this.getToken(ECLParser.CAP_D, i);
	    }
	};


	E = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.E);
	    } else {
	        return this.getToken(ECLParser.E, i);
	    }
	};


	CAP_E = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_E);
	    } else {
	        return this.getToken(ECLParser.CAP_E, i);
	    }
	};


	S() {
	    return this.getToken(ECLParser.S, 0);
	};

	CAP_S() {
	    return this.getToken(ECLParser.CAP_S, 0);
	};

	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	N = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.N);
	    } else {
	        return this.getToken(ECLParser.N, i);
	    }
	};


	CAP_N = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_N);
	    } else {
	        return this.getToken(ECLParser.CAP_N, i);
	    }
	};


	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDescendantof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDescendantof(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDescendantof(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescendantorselfofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_descendantorselfof;
    }

	LESS_THAN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.LESS_THAN);
	    } else {
	        return this.getToken(ECLParser.LESS_THAN, i);
	    }
	};


	D = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.D);
	    } else {
	        return this.getToken(ECLParser.D, i);
	    }
	};


	CAP_D = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_D);
	    } else {
	        return this.getToken(ECLParser.CAP_D, i);
	    }
	};


	E = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.E);
	    } else {
	        return this.getToken(ECLParser.E, i);
	    }
	};


	CAP_E = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_E);
	    } else {
	        return this.getToken(ECLParser.CAP_E, i);
	    }
	};


	S = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.S);
	    } else {
	        return this.getToken(ECLParser.S, i);
	    }
	};


	CAP_S = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_S);
	    } else {
	        return this.getToken(ECLParser.CAP_S, i);
	    }
	};


	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	N = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.N);
	    } else {
	        return this.getToken(ECLParser.N, i);
	    }
	};


	CAP_N = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_N);
	    } else {
	        return this.getToken(ECLParser.CAP_N, i);
	    }
	};


	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	O = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.O);
	    } else {
	        return this.getToken(ECLParser.O, i);
	    }
	};


	CAP_O = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_O);
	    } else {
	        return this.getToken(ECLParser.CAP_O, i);
	    }
	};


	R() {
	    return this.getToken(ECLParser.R, 0);
	};

	CAP_R() {
	    return this.getToken(ECLParser.CAP_R, 0);
	};

	L() {
	    return this.getToken(ECLParser.L, 0);
	};

	CAP_L() {
	    return this.getToken(ECLParser.CAP_L, 0);
	};

	F = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.F);
	    } else {
	        return this.getToken(ECLParser.F, i);
	    }
	};


	CAP_F = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_F);
	    } else {
	        return this.getToken(ECLParser.CAP_F, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDescendantorselfof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDescendantorselfof(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDescendantorselfof(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChildofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_childof;
    }

	LESS_THAN() {
	    return this.getToken(ECLParser.LESS_THAN, 0);
	};

	EXCLAMATION() {
	    return this.getToken(ECLParser.EXCLAMATION, 0);
	};

	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	H() {
	    return this.getToken(ECLParser.H, 0);
	};

	CAP_H() {
	    return this.getToken(ECLParser.CAP_H, 0);
	};

	I() {
	    return this.getToken(ECLParser.I, 0);
	};

	CAP_I() {
	    return this.getToken(ECLParser.CAP_I, 0);
	};

	L() {
	    return this.getToken(ECLParser.L, 0);
	};

	CAP_L() {
	    return this.getToken(ECLParser.CAP_L, 0);
	};

	D() {
	    return this.getToken(ECLParser.D, 0);
	};

	CAP_D() {
	    return this.getToken(ECLParser.CAP_D, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterChildof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitChildof(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitChildof(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AncestorofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_ancestorof;
    }

	GREATER_THAN() {
	    return this.getToken(ECLParser.GREATER_THAN, 0);
	};

	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	E() {
	    return this.getToken(ECLParser.E, 0);
	};

	CAP_E() {
	    return this.getToken(ECLParser.CAP_E, 0);
	};

	S() {
	    return this.getToken(ECLParser.S, 0);
	};

	CAP_S() {
	    return this.getToken(ECLParser.CAP_S, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	O = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.O);
	    } else {
	        return this.getToken(ECLParser.O, i);
	    }
	};


	CAP_O = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_O);
	    } else {
	        return this.getToken(ECLParser.CAP_O, i);
	    }
	};


	R() {
	    return this.getToken(ECLParser.R, 0);
	};

	CAP_R() {
	    return this.getToken(ECLParser.CAP_R, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterAncestorof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitAncestorof(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitAncestorof(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AncestororselfofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_ancestororselfof;
    }

	GREATER_THAN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.GREATER_THAN);
	    } else {
	        return this.getToken(ECLParser.GREATER_THAN, i);
	    }
	};


	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	E = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.E);
	    } else {
	        return this.getToken(ECLParser.E, i);
	    }
	};


	CAP_E = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_E);
	    } else {
	        return this.getToken(ECLParser.CAP_E, i);
	    }
	};


	S = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.S);
	    } else {
	        return this.getToken(ECLParser.S, i);
	    }
	};


	CAP_S = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_S);
	    } else {
	        return this.getToken(ECLParser.CAP_S, i);
	    }
	};


	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	O = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.O);
	    } else {
	        return this.getToken(ECLParser.O, i);
	    }
	};


	CAP_O = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_O);
	    } else {
	        return this.getToken(ECLParser.CAP_O, i);
	    }
	};


	R = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.R);
	    } else {
	        return this.getToken(ECLParser.R, i);
	    }
	};


	CAP_R = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_R);
	    } else {
	        return this.getToken(ECLParser.CAP_R, i);
	    }
	};


	L() {
	    return this.getToken(ECLParser.L, 0);
	};

	CAP_L() {
	    return this.getToken(ECLParser.CAP_L, 0);
	};

	F = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.F);
	    } else {
	        return this.getToken(ECLParser.F, i);
	    }
	};


	CAP_F = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_F);
	    } else {
	        return this.getToken(ECLParser.CAP_F, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterAncestororselfof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitAncestororselfof(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitAncestororselfof(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParentofContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_parentof;
    }

	GREATER_THAN() {
	    return this.getToken(ECLParser.GREATER_THAN, 0);
	};

	EXCLAMATION() {
	    return this.getToken(ECLParser.EXCLAMATION, 0);
	};

	P() {
	    return this.getToken(ECLParser.P, 0);
	};

	CAP_P() {
	    return this.getToken(ECLParser.CAP_P, 0);
	};

	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	R() {
	    return this.getToken(ECLParser.R, 0);
	};

	CAP_R() {
	    return this.getToken(ECLParser.CAP_R, 0);
	};

	E() {
	    return this.getToken(ECLParser.E, 0);
	};

	CAP_E() {
	    return this.getToken(ECLParser.CAP_E, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterParentof(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitParentof(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitParentof(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_conjunction;
    }

	mws() {
	    return this.getTypedRuleContext(MwsContext,0);
	};

	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	D() {
	    return this.getToken(ECLParser.D, 0);
	};

	CAP_D() {
	    return this.getToken(ECLParser.CAP_D, 0);
	};

	COMMA() {
	    return this.getToken(ECLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitConjunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitConjunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DisjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_disjunction;
    }

	mws() {
	    return this.getTypedRuleContext(MwsContext,0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	R() {
	    return this.getToken(ECLParser.R, 0);
	};

	CAP_R() {
	    return this.getToken(ECLParser.CAP_R, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDisjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDisjunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDisjunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExclusionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_exclusion;
    }

	mws() {
	    return this.getTypedRuleContext(MwsContext,0);
	};

	M() {
	    return this.getToken(ECLParser.M, 0);
	};

	CAP_M() {
	    return this.getToken(ECLParser.CAP_M, 0);
	};

	I() {
	    return this.getToken(ECLParser.I, 0);
	};

	CAP_I() {
	    return this.getToken(ECLParser.CAP_I, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	U() {
	    return this.getToken(ECLParser.U, 0);
	};

	CAP_U() {
	    return this.getToken(ECLParser.CAP_U, 0);
	};

	S() {
	    return this.getToken(ECLParser.S, 0);
	};

	CAP_S() {
	    return this.getToken(ECLParser.CAP_S, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterExclusion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitExclusion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitExclusion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclrefinementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_eclrefinement;
    }

	subrefinement() {
	    return this.getTypedRuleContext(SubrefinementContext,0);
	};

	compoundrefinementset() {
	    return this.getTypedRuleContext(CompoundrefinementsetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEclrefinement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEclrefinement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEclrefinement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompoundrefinementsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_compoundrefinementset;
    }

	conjunctionrefinementset() {
	    return this.getTypedRuleContext(ConjunctionrefinementsetContext,0);
	};

	disjunctionrefinementset() {
	    return this.getTypedRuleContext(DisjunctionrefinementsetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterCompoundrefinementset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitCompoundrefinementset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitCompoundrefinementset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConjunctionrefinementsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_conjunctionrefinementset;
    }

	subrefinement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubrefinementContext);
	    } else {
	        return this.getTypedRuleContext(SubrefinementContext,i);
	    }
	};

	bracketcompoundrefinementset = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BracketcompoundrefinementsetContext);
	    } else {
	        return this.getTypedRuleContext(BracketcompoundrefinementsetContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	conjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConjunctionContext);
	    } else {
	        return this.getTypedRuleContext(ConjunctionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterConjunctionrefinementset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitConjunctionrefinementset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitConjunctionrefinementset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DisjunctionrefinementsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_disjunctionrefinementset;
    }

	subrefinement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubrefinementContext);
	    } else {
	        return this.getTypedRuleContext(SubrefinementContext,i);
	    }
	};

	bracketcompoundrefinementset = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BracketcompoundrefinementsetContext);
	    } else {
	        return this.getTypedRuleContext(BracketcompoundrefinementsetContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	disjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisjunctionContext);
	    } else {
	        return this.getTypedRuleContext(DisjunctionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDisjunctionrefinementset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDisjunctionrefinementset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDisjunctionrefinementset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BracketcompoundrefinementsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_bracketcompoundrefinementset;
    }

	LEFT_PAREN() {
	    return this.getToken(ECLParser.LEFT_PAREN, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	compoundrefinementset() {
	    return this.getTypedRuleContext(CompoundrefinementsetContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(ECLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterBracketcompoundrefinementset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitBracketcompoundrefinementset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitBracketcompoundrefinementset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubrefinementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_subrefinement;
    }

	compoundattributeset() {
	    return this.getTypedRuleContext(CompoundattributesetContext,0);
	};

	eclattributegroup() {
	    return this.getTypedRuleContext(EclattributegroupContext,0);
	};

	bracketsubrefinement() {
	    return this.getTypedRuleContext(BracketsubrefinementContext,0);
	};

	eclattribute() {
	    return this.getTypedRuleContext(EclattributeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterSubrefinement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitSubrefinement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitSubrefinement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BracketsubrefinementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_bracketsubrefinement;
    }

	LEFT_PAREN() {
	    return this.getToken(ECLParser.LEFT_PAREN, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	eclrefinement() {
	    return this.getTypedRuleContext(EclrefinementContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(ECLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterBracketsubrefinement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitBracketsubrefinement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitBracketsubrefinement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompoundattributesetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_compoundattributeset;
    }

	conjunctionattributeset() {
	    return this.getTypedRuleContext(ConjunctionattributesetContext,0);
	};

	disjunctionattributeset() {
	    return this.getTypedRuleContext(DisjunctionattributesetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterCompoundattributeset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitCompoundattributeset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitCompoundattributeset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConjunctionattributesetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_conjunctionattributeset;
    }

	subattributeset = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubattributesetContext);
	    } else {
	        return this.getTypedRuleContext(SubattributesetContext,i);
	    }
	};

	bracketattributeset = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BracketattributesetContext);
	    } else {
	        return this.getTypedRuleContext(BracketattributesetContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	conjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConjunctionContext);
	    } else {
	        return this.getTypedRuleContext(ConjunctionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterConjunctionattributeset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitConjunctionattributeset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitConjunctionattributeset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DisjunctionattributesetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_disjunctionattributeset;
    }

	subattributeset = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubattributesetContext);
	    } else {
	        return this.getTypedRuleContext(SubattributesetContext,i);
	    }
	};

	bracketattributeset = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BracketattributesetContext);
	    } else {
	        return this.getTypedRuleContext(BracketattributesetContext,i);
	    }
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	disjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisjunctionContext);
	    } else {
	        return this.getTypedRuleContext(DisjunctionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDisjunctionattributeset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDisjunctionattributeset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDisjunctionattributeset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BracketattributesetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_bracketattributeset;
    }

	LEFT_PAREN() {
	    return this.getToken(ECLParser.LEFT_PAREN, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	compoundattributeset() {
	    return this.getTypedRuleContext(CompoundattributesetContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(ECLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterBracketattributeset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitBracketattributeset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitBracketattributeset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubattributesetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_subattributeset;
    }

	eclattribute() {
	    return this.getTypedRuleContext(EclattributeContext,0);
	};

	bracketattributeset() {
	    return this.getTypedRuleContext(BracketattributesetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterSubattributeset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitSubattributeset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitSubattributeset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclattributegroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_eclattributegroup;
    }

	LEFT_CURLY_BRACE() {
	    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	RIGHT_CURLY_BRACE() {
	    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
	};

	compoundattributeset() {
	    return this.getTypedRuleContext(CompoundattributesetContext,0);
	};

	eclattribute() {
	    return this.getTypedRuleContext(EclattributeContext,0);
	};

	cardinality() {
	    return this.getTypedRuleContext(CardinalityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEclattributegroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEclattributegroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEclattributegroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclattributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_eclattribute;
    }

	subexpressionconstraint() {
	    return this.getTypedRuleContext(SubexpressionconstraintContext,0);
	};

	ws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WsContext);
	    } else {
	        return this.getTypedRuleContext(WsContext,i);
	    }
	};

	eclattributeexpressionvalue() {
	    return this.getTypedRuleContext(EclattributeexpressionvalueContext,0);
	};

	eclattributenumbervalue() {
	    return this.getTypedRuleContext(EclattributenumbervalueContext,0);
	};

	eclattributestringvalue() {
	    return this.getTypedRuleContext(EclattributestringvalueContext,0);
	};

	cardinality() {
	    return this.getTypedRuleContext(CardinalityContext,0);
	};

	reverseflag() {
	    return this.getTypedRuleContext(ReverseflagContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEclattribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEclattribute(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEclattribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclattributestringvalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_eclattributestringvalue;
    }

	stringcomparisonoperator() {
	    return this.getTypedRuleContext(StringcomparisonoperatorContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	qm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QmContext);
	    } else {
	        return this.getTypedRuleContext(QmContext,i);
	    }
	};

	stringvalue() {
	    return this.getTypedRuleContext(StringvalueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEclattributestringvalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEclattributestringvalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEclattributestringvalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclattributenumbervalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_eclattributenumbervalue;
    }

	numericcomparisonoperator() {
	    return this.getTypedRuleContext(NumericcomparisonoperatorContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	POUND() {
	    return this.getToken(ECLParser.POUND, 0);
	};

	numericvalue() {
	    return this.getTypedRuleContext(NumericvalueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEclattributenumbervalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEclattributenumbervalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEclattributenumbervalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EclattributeexpressionvalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_eclattributeexpressionvalue;
    }

	expressioncomparisonoperator() {
	    return this.getTypedRuleContext(ExpressioncomparisonoperatorContext,0);
	};

	ws() {
	    return this.getTypedRuleContext(WsContext,0);
	};

	subexpressionconstraint() {
	    return this.getTypedRuleContext(SubexpressionconstraintContext,0);
	};

	bracketcompoundexpressionconstraint() {
	    return this.getTypedRuleContext(BracketcompoundexpressionconstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEclattributeexpressionvalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEclattributeexpressionvalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEclattributeexpressionvalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CardinalityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_cardinality;
    }

	LEFT_BRACE() {
	    return this.getToken(ECLParser.LEFT_BRACE, 0);
	};

	minvalue() {
	    return this.getTypedRuleContext(MinvalueContext,0);
	};

	to() {
	    return this.getTypedRuleContext(ToContext,0);
	};

	maxvalue() {
	    return this.getTypedRuleContext(MaxvalueContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(ECLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterCardinality(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitCardinality(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitCardinality(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MinvalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_minvalue;
    }

	nonnegativeintegervalue() {
	    return this.getTypedRuleContext(NonnegativeintegervalueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterMinvalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitMinvalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitMinvalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_to;
    }

	PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.PERIOD);
	    } else {
	        return this.getToken(ECLParser.PERIOD, i);
	    }
	};


	mws = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MwsContext);
	    } else {
	        return this.getTypedRuleContext(MwsContext,i);
	    }
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterTo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitTo(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitTo(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MaxvalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_maxvalue;
    }

	nonnegativeintegervalue() {
	    return this.getTypedRuleContext(NonnegativeintegervalueContext,0);
	};

	many() {
	    return this.getTypedRuleContext(ManyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterMaxvalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitMaxvalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitMaxvalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ManyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_many;
    }

	ASTERISK() {
	    return this.getToken(ECLParser.ASTERISK, 0);
	};

	M() {
	    return this.getToken(ECLParser.M, 0);
	};

	CAP_M() {
	    return this.getToken(ECLParser.CAP_M, 0);
	};

	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	Y() {
	    return this.getToken(ECLParser.Y, 0);
	};

	CAP_Y() {
	    return this.getToken(ECLParser.CAP_Y, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterMany(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitMany(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitMany(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReverseflagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_reverseflag;
    }

	R = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.R);
	    } else {
	        return this.getToken(ECLParser.R, i);
	    }
	};


	CAP_R = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_R);
	    } else {
	        return this.getToken(ECLParser.CAP_R, i);
	    }
	};


	E = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.E);
	    } else {
	        return this.getToken(ECLParser.E, i);
	    }
	};


	CAP_E = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.CAP_E);
	    } else {
	        return this.getToken(ECLParser.CAP_E, i);
	    }
	};


	V() {
	    return this.getToken(ECLParser.V, 0);
	};

	CAP_V() {
	    return this.getToken(ECLParser.CAP_V, 0);
	};

	S() {
	    return this.getToken(ECLParser.S, 0);
	};

	CAP_S() {
	    return this.getToken(ECLParser.CAP_S, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	mws() {
	    return this.getTypedRuleContext(MwsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterReverseflag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitReverseflag(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitReverseflag(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressioncomparisonoperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_expressioncomparisonoperator;
    }

	EQUALS() {
	    return this.getToken(ECLParser.EQUALS, 0);
	};

	EXCLAMATION() {
	    return this.getToken(ECLParser.EXCLAMATION, 0);
	};

	mws() {
	    return this.getTypedRuleContext(MwsContext,0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterExpressioncomparisonoperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitExpressioncomparisonoperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitExpressioncomparisonoperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericcomparisonoperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_numericcomparisonoperator;
    }

	EQUALS() {
	    return this.getToken(ECLParser.EQUALS, 0);
	};

	EXCLAMATION() {
	    return this.getToken(ECLParser.EXCLAMATION, 0);
	};

	mws() {
	    return this.getTypedRuleContext(MwsContext,0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	LESS_THAN() {
	    return this.getToken(ECLParser.LESS_THAN, 0);
	};

	GREATER_THAN() {
	    return this.getToken(ECLParser.GREATER_THAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterNumericcomparisonoperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitNumericcomparisonoperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitNumericcomparisonoperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringcomparisonoperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_stringcomparisonoperator;
    }

	EQUALS() {
	    return this.getToken(ECLParser.EQUALS, 0);
	};

	EXCLAMATION() {
	    return this.getToken(ECLParser.EXCLAMATION, 0);
	};

	mws() {
	    return this.getTypedRuleContext(MwsContext,0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterStringcomparisonoperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitStringcomparisonoperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitStringcomparisonoperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericvalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_numericvalue;
    }

	decimalvalue() {
	    return this.getTypedRuleContext(DecimalvalueContext,0);
	};

	integervalue() {
	    return this.getTypedRuleContext(IntegervalueContext,0);
	};

	DASH() {
	    return this.getToken(ECLParser.DASH, 0);
	};

	PLUS() {
	    return this.getToken(ECLParser.PLUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterNumericvalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitNumericvalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitNumericvalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringvalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_stringvalue;
    }

	anynonescapedchar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnynonescapedcharContext);
	    } else {
	        return this.getTypedRuleContext(AnynonescapedcharContext,i);
	    }
	};

	escapedchar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EscapedcharContext);
	    } else {
	        return this.getTypedRuleContext(EscapedcharContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterStringvalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitStringvalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitStringvalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegervalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_integervalue;
    }

	digitnonzero() {
	    return this.getTypedRuleContext(DigitnonzeroContext,0);
	};

	digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DigitContext);
	    } else {
	        return this.getTypedRuleContext(DigitContext,i);
	    }
	};

	zero() {
	    return this.getTypedRuleContext(ZeroContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterIntegervalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitIntegervalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitIntegervalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecimalvalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_decimalvalue;
    }

	integervalue() {
	    return this.getTypedRuleContext(IntegervalueContext,0);
	};

	PERIOD() {
	    return this.getToken(ECLParser.PERIOD, 0);
	};

	digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DigitContext);
	    } else {
	        return this.getTypedRuleContext(DigitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDecimalvalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDecimalvalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDecimalvalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonnegativeintegervalueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_nonnegativeintegervalue;
    }

	digitnonzero() {
	    return this.getTypedRuleContext(DigitnonzeroContext,0);
	};

	digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DigitContext);
	    } else {
	        return this.getTypedRuleContext(DigitContext,i);
	    }
	};

	zero() {
	    return this.getTypedRuleContext(ZeroContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterNonnegativeintegervalue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitNonnegativeintegervalue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitNonnegativeintegervalue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SctidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_sctid;
    }

	H() {
	    return this.getToken(ECLParser.H, 0);
	};

	T = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.T);
	    } else {
	        return this.getToken(ECLParser.T, i);
	    }
	};


	P() {
	    return this.getToken(ECLParser.P, 0);
	};

	nonspacechar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NonspacecharContext);
	    } else {
	        return this.getTypedRuleContext(NonspacecharContext,i);
	    }
	};

	digitnonzero() {
	    return this.getTypedRuleContext(DigitnonzeroContext,0);
	};

	digit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DigitContext);
	    } else {
	        return this.getTypedRuleContext(DigitContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterSctid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitSctid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitSctid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_ws;
    }

	sp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpContext);
	    } else {
	        return this.getTypedRuleContext(SpContext,i);
	    }
	};

	htab = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HtabContext);
	    } else {
	        return this.getTypedRuleContext(HtabContext,i);
	    }
	};

	cr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CrContext);
	    } else {
	        return this.getTypedRuleContext(CrContext,i);
	    }
	};

	lf = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfContext);
	    } else {
	        return this.getTypedRuleContext(LfContext,i);
	    }
	};

	comment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentContext);
	    } else {
	        return this.getTypedRuleContext(CommentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterWs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitWs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitWs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MwsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_mws;
    }

	sp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpContext);
	    } else {
	        return this.getTypedRuleContext(SpContext,i);
	    }
	};

	htab = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HtabContext);
	    } else {
	        return this.getTypedRuleContext(HtabContext,i);
	    }
	};

	cr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CrContext);
	    } else {
	        return this.getTypedRuleContext(CrContext,i);
	    }
	};

	lf = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LfContext);
	    } else {
	        return this.getTypedRuleContext(LfContext,i);
	    }
	};

	comment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentContext);
	    } else {
	        return this.getTypedRuleContext(CommentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterMws(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitMws(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitMws(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_comment;
    }

	SLASH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.SLASH);
	    } else {
	        return this.getToken(ECLParser.SLASH, i);
	    }
	};


	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ECLParser.ASTERISK);
	    } else {
	        return this.getToken(ECLParser.ASTERISK, i);
	    }
	};


	nonstarchar = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NonstarcharContext);
	    } else {
	        return this.getTypedRuleContext(NonstarcharContext,i);
	    }
	};

	starwithnonfslash = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StarwithnonfslashContext);
	    } else {
	        return this.getTypedRuleContext(StarwithnonfslashContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonstarcharContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_nonstarchar;
    }

	sp() {
	    return this.getTypedRuleContext(SpContext,0);
	};

	htab() {
	    return this.getTypedRuleContext(HtabContext,0);
	};

	cr() {
	    return this.getTypedRuleContext(CrContext,0);
	};

	lf() {
	    return this.getTypedRuleContext(LfContext,0);
	};

	EXCLAMATION() {
	    return this.getToken(ECLParser.EXCLAMATION, 0);
	};

	QUOTE() {
	    return this.getToken(ECLParser.QUOTE, 0);
	};

	POUND() {
	    return this.getToken(ECLParser.POUND, 0);
	};

	DOLLAR() {
	    return this.getToken(ECLParser.DOLLAR, 0);
	};

	PERCENT() {
	    return this.getToken(ECLParser.PERCENT, 0);
	};

	AMPERSAND() {
	    return this.getToken(ECLParser.AMPERSAND, 0);
	};

	APOSTROPHE() {
	    return this.getToken(ECLParser.APOSTROPHE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(ECLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(ECLParser.RIGHT_PAREN, 0);
	};

	PLUS() {
	    return this.getToken(ECLParser.PLUS, 0);
	};

	COMMA() {
	    return this.getToken(ECLParser.COMMA, 0);
	};

	DASH() {
	    return this.getToken(ECLParser.DASH, 0);
	};

	PERIOD() {
	    return this.getToken(ECLParser.PERIOD, 0);
	};

	SLASH() {
	    return this.getToken(ECLParser.SLASH, 0);
	};

	ZERO() {
	    return this.getToken(ECLParser.ZERO, 0);
	};

	ONE() {
	    return this.getToken(ECLParser.ONE, 0);
	};

	TWO() {
	    return this.getToken(ECLParser.TWO, 0);
	};

	THREE() {
	    return this.getToken(ECLParser.THREE, 0);
	};

	FOUR() {
	    return this.getToken(ECLParser.FOUR, 0);
	};

	FIVE() {
	    return this.getToken(ECLParser.FIVE, 0);
	};

	SIX() {
	    return this.getToken(ECLParser.SIX, 0);
	};

	SEVEN() {
	    return this.getToken(ECLParser.SEVEN, 0);
	};

	EIGHT() {
	    return this.getToken(ECLParser.EIGHT, 0);
	};

	NINE() {
	    return this.getToken(ECLParser.NINE, 0);
	};

	COLON() {
	    return this.getToken(ECLParser.COLON, 0);
	};

	SEMICOLON() {
	    return this.getToken(ECLParser.SEMICOLON, 0);
	};

	LESS_THAN() {
	    return this.getToken(ECLParser.LESS_THAN, 0);
	};

	EQUALS() {
	    return this.getToken(ECLParser.EQUALS, 0);
	};

	GREATER_THAN() {
	    return this.getToken(ECLParser.GREATER_THAN, 0);
	};

	QUESTION() {
	    return this.getToken(ECLParser.QUESTION, 0);
	};

	AT() {
	    return this.getToken(ECLParser.AT, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	CAP_B() {
	    return this.getToken(ECLParser.CAP_B, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	CAP_D() {
	    return this.getToken(ECLParser.CAP_D, 0);
	};

	CAP_E() {
	    return this.getToken(ECLParser.CAP_E, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	CAP_G() {
	    return this.getToken(ECLParser.CAP_G, 0);
	};

	CAP_H() {
	    return this.getToken(ECLParser.CAP_H, 0);
	};

	CAP_I() {
	    return this.getToken(ECLParser.CAP_I, 0);
	};

	CAP_J() {
	    return this.getToken(ECLParser.CAP_J, 0);
	};

	CAP_K() {
	    return this.getToken(ECLParser.CAP_K, 0);
	};

	CAP_L() {
	    return this.getToken(ECLParser.CAP_L, 0);
	};

	CAP_M() {
	    return this.getToken(ECLParser.CAP_M, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	CAP_P() {
	    return this.getToken(ECLParser.CAP_P, 0);
	};

	CAP_Q() {
	    return this.getToken(ECLParser.CAP_Q, 0);
	};

	CAP_R() {
	    return this.getToken(ECLParser.CAP_R, 0);
	};

	CAP_S() {
	    return this.getToken(ECLParser.CAP_S, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	CAP_U() {
	    return this.getToken(ECLParser.CAP_U, 0);
	};

	CAP_V() {
	    return this.getToken(ECLParser.CAP_V, 0);
	};

	CAP_W() {
	    return this.getToken(ECLParser.CAP_W, 0);
	};

	CAP_X() {
	    return this.getToken(ECLParser.CAP_X, 0);
	};

	CAP_Y() {
	    return this.getToken(ECLParser.CAP_Y, 0);
	};

	CAP_Z() {
	    return this.getToken(ECLParser.CAP_Z, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(ECLParser.LEFT_BRACE, 0);
	};

	BACKSLASH() {
	    return this.getToken(ECLParser.BACKSLASH, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(ECLParser.RIGHT_BRACE, 0);
	};

	CARAT() {
	    return this.getToken(ECLParser.CARAT, 0);
	};

	UNDERSCORE() {
	    return this.getToken(ECLParser.UNDERSCORE, 0);
	};

	ACCENT() {
	    return this.getToken(ECLParser.ACCENT, 0);
	};

	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	B() {
	    return this.getToken(ECLParser.B, 0);
	};

	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	D() {
	    return this.getToken(ECLParser.D, 0);
	};

	E() {
	    return this.getToken(ECLParser.E, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	G() {
	    return this.getToken(ECLParser.G, 0);
	};

	H() {
	    return this.getToken(ECLParser.H, 0);
	};

	I() {
	    return this.getToken(ECLParser.I, 0);
	};

	J() {
	    return this.getToken(ECLParser.J, 0);
	};

	K() {
	    return this.getToken(ECLParser.K, 0);
	};

	L() {
	    return this.getToken(ECLParser.L, 0);
	};

	M() {
	    return this.getToken(ECLParser.M, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	P() {
	    return this.getToken(ECLParser.P, 0);
	};

	Q() {
	    return this.getToken(ECLParser.Q, 0);
	};

	R() {
	    return this.getToken(ECLParser.R, 0);
	};

	S() {
	    return this.getToken(ECLParser.S, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	U() {
	    return this.getToken(ECLParser.U, 0);
	};

	V() {
	    return this.getToken(ECLParser.V, 0);
	};

	W() {
	    return this.getToken(ECLParser.W, 0);
	};

	X() {
	    return this.getToken(ECLParser.X, 0);
	};

	Y() {
	    return this.getToken(ECLParser.Y, 0);
	};

	Z() {
	    return this.getToken(ECLParser.Z, 0);
	};

	LEFT_CURLY_BRACE() {
	    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
	};

	PIPE() {
	    return this.getToken(ECLParser.PIPE, 0);
	};

	RIGHT_CURLY_BRACE() {
	    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
	};

	TILDE() {
	    return this.getToken(ECLParser.TILDE, 0);
	};

	UTF8_LETTER() {
	    return this.getToken(ECLParser.UTF8_LETTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterNonstarchar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitNonstarchar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitNonstarchar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonspacecharContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_nonspacechar;
    }

	POUND() {
	    return this.getToken(ECLParser.POUND, 0);
	};

	DOLLAR() {
	    return this.getToken(ECLParser.DOLLAR, 0);
	};

	PERCENT() {
	    return this.getToken(ECLParser.PERCENT, 0);
	};

	AMPERSAND() {
	    return this.getToken(ECLParser.AMPERSAND, 0);
	};

	APOSTROPHE() {
	    return this.getToken(ECLParser.APOSTROPHE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(ECLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(ECLParser.RIGHT_PAREN, 0);
	};

	PLUS() {
	    return this.getToken(ECLParser.PLUS, 0);
	};

	COMMA() {
	    return this.getToken(ECLParser.COMMA, 0);
	};

	DASH() {
	    return this.getToken(ECLParser.DASH, 0);
	};

	PERIOD() {
	    return this.getToken(ECLParser.PERIOD, 0);
	};

	SLASH() {
	    return this.getToken(ECLParser.SLASH, 0);
	};

	ZERO() {
	    return this.getToken(ECLParser.ZERO, 0);
	};

	ONE() {
	    return this.getToken(ECLParser.ONE, 0);
	};

	TWO() {
	    return this.getToken(ECLParser.TWO, 0);
	};

	THREE() {
	    return this.getToken(ECLParser.THREE, 0);
	};

	FOUR() {
	    return this.getToken(ECLParser.FOUR, 0);
	};

	FIVE() {
	    return this.getToken(ECLParser.FIVE, 0);
	};

	SIX() {
	    return this.getToken(ECLParser.SIX, 0);
	};

	SEVEN() {
	    return this.getToken(ECLParser.SEVEN, 0);
	};

	EIGHT() {
	    return this.getToken(ECLParser.EIGHT, 0);
	};

	NINE() {
	    return this.getToken(ECLParser.NINE, 0);
	};

	COLON() {
	    return this.getToken(ECLParser.COLON, 0);
	};

	SEMICOLON() {
	    return this.getToken(ECLParser.SEMICOLON, 0);
	};

	LESS_THAN() {
	    return this.getToken(ECLParser.LESS_THAN, 0);
	};

	EQUALS() {
	    return this.getToken(ECLParser.EQUALS, 0);
	};

	GREATER_THAN() {
	    return this.getToken(ECLParser.GREATER_THAN, 0);
	};

	QUESTION() {
	    return this.getToken(ECLParser.QUESTION, 0);
	};

	AT() {
	    return this.getToken(ECLParser.AT, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	CAP_B() {
	    return this.getToken(ECLParser.CAP_B, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	CAP_D() {
	    return this.getToken(ECLParser.CAP_D, 0);
	};

	CAP_E() {
	    return this.getToken(ECLParser.CAP_E, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	CAP_G() {
	    return this.getToken(ECLParser.CAP_G, 0);
	};

	CAP_H() {
	    return this.getToken(ECLParser.CAP_H, 0);
	};

	CAP_I() {
	    return this.getToken(ECLParser.CAP_I, 0);
	};

	CAP_J() {
	    return this.getToken(ECLParser.CAP_J, 0);
	};

	CAP_K() {
	    return this.getToken(ECLParser.CAP_K, 0);
	};

	CAP_L() {
	    return this.getToken(ECLParser.CAP_L, 0);
	};

	CAP_M() {
	    return this.getToken(ECLParser.CAP_M, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	CAP_P() {
	    return this.getToken(ECLParser.CAP_P, 0);
	};

	CAP_Q() {
	    return this.getToken(ECLParser.CAP_Q, 0);
	};

	CAP_R() {
	    return this.getToken(ECLParser.CAP_R, 0);
	};

	CAP_S() {
	    return this.getToken(ECLParser.CAP_S, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	CAP_U() {
	    return this.getToken(ECLParser.CAP_U, 0);
	};

	CAP_V() {
	    return this.getToken(ECLParser.CAP_V, 0);
	};

	CAP_W() {
	    return this.getToken(ECLParser.CAP_W, 0);
	};

	CAP_X() {
	    return this.getToken(ECLParser.CAP_X, 0);
	};

	CAP_Y() {
	    return this.getToken(ECLParser.CAP_Y, 0);
	};

	CAP_Z() {
	    return this.getToken(ECLParser.CAP_Z, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(ECLParser.LEFT_BRACE, 0);
	};

	BACKSLASH() {
	    return this.getToken(ECLParser.BACKSLASH, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(ECLParser.RIGHT_BRACE, 0);
	};

	CARAT() {
	    return this.getToken(ECLParser.CARAT, 0);
	};

	UNDERSCORE() {
	    return this.getToken(ECLParser.UNDERSCORE, 0);
	};

	ACCENT() {
	    return this.getToken(ECLParser.ACCENT, 0);
	};

	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	B() {
	    return this.getToken(ECLParser.B, 0);
	};

	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	D() {
	    return this.getToken(ECLParser.D, 0);
	};

	E() {
	    return this.getToken(ECLParser.E, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	G() {
	    return this.getToken(ECLParser.G, 0);
	};

	H() {
	    return this.getToken(ECLParser.H, 0);
	};

	I() {
	    return this.getToken(ECLParser.I, 0);
	};

	J() {
	    return this.getToken(ECLParser.J, 0);
	};

	K() {
	    return this.getToken(ECLParser.K, 0);
	};

	L() {
	    return this.getToken(ECLParser.L, 0);
	};

	M() {
	    return this.getToken(ECLParser.M, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	P() {
	    return this.getToken(ECLParser.P, 0);
	};

	Q() {
	    return this.getToken(ECLParser.Q, 0);
	};

	R() {
	    return this.getToken(ECLParser.R, 0);
	};

	S() {
	    return this.getToken(ECLParser.S, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	U() {
	    return this.getToken(ECLParser.U, 0);
	};

	V() {
	    return this.getToken(ECLParser.V, 0);
	};

	W() {
	    return this.getToken(ECLParser.W, 0);
	};

	X() {
	    return this.getToken(ECLParser.X, 0);
	};

	Y() {
	    return this.getToken(ECLParser.Y, 0);
	};

	Z() {
	    return this.getToken(ECLParser.Z, 0);
	};

	LEFT_CURLY_BRACE() {
	    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
	};

	PIPE() {
	    return this.getToken(ECLParser.PIPE, 0);
	};

	RIGHT_CURLY_BRACE() {
	    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
	};

	TILDE() {
	    return this.getToken(ECLParser.TILDE, 0);
	};

	UTF8_LETTER() {
	    return this.getToken(ECLParser.UTF8_LETTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterNonspacechar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitNonspacechar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitNonspacechar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StarwithnonfslashContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_starwithnonfslash;
    }

	ASTERISK() {
	    return this.getToken(ECLParser.ASTERISK, 0);
	};

	nonfslash() {
	    return this.getTypedRuleContext(NonfslashContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterStarwithnonfslash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitStarwithnonfslash(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitStarwithnonfslash(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonfslashContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_nonfslash;
    }

	sp() {
	    return this.getTypedRuleContext(SpContext,0);
	};

	htab() {
	    return this.getTypedRuleContext(HtabContext,0);
	};

	cr() {
	    return this.getTypedRuleContext(CrContext,0);
	};

	lf() {
	    return this.getTypedRuleContext(LfContext,0);
	};

	EXCLAMATION() {
	    return this.getToken(ECLParser.EXCLAMATION, 0);
	};

	QUOTE() {
	    return this.getToken(ECLParser.QUOTE, 0);
	};

	POUND() {
	    return this.getToken(ECLParser.POUND, 0);
	};

	DOLLAR() {
	    return this.getToken(ECLParser.DOLLAR, 0);
	};

	PERCENT() {
	    return this.getToken(ECLParser.PERCENT, 0);
	};

	AMPERSAND() {
	    return this.getToken(ECLParser.AMPERSAND, 0);
	};

	APOSTROPHE() {
	    return this.getToken(ECLParser.APOSTROPHE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(ECLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(ECLParser.RIGHT_PAREN, 0);
	};

	ASTERISK() {
	    return this.getToken(ECLParser.ASTERISK, 0);
	};

	PLUS() {
	    return this.getToken(ECLParser.PLUS, 0);
	};

	COMMA() {
	    return this.getToken(ECLParser.COMMA, 0);
	};

	DASH() {
	    return this.getToken(ECLParser.DASH, 0);
	};

	PERIOD() {
	    return this.getToken(ECLParser.PERIOD, 0);
	};

	ZERO() {
	    return this.getToken(ECLParser.ZERO, 0);
	};

	ONE() {
	    return this.getToken(ECLParser.ONE, 0);
	};

	TWO() {
	    return this.getToken(ECLParser.TWO, 0);
	};

	THREE() {
	    return this.getToken(ECLParser.THREE, 0);
	};

	FOUR() {
	    return this.getToken(ECLParser.FOUR, 0);
	};

	FIVE() {
	    return this.getToken(ECLParser.FIVE, 0);
	};

	SIX() {
	    return this.getToken(ECLParser.SIX, 0);
	};

	SEVEN() {
	    return this.getToken(ECLParser.SEVEN, 0);
	};

	EIGHT() {
	    return this.getToken(ECLParser.EIGHT, 0);
	};

	NINE() {
	    return this.getToken(ECLParser.NINE, 0);
	};

	COLON() {
	    return this.getToken(ECLParser.COLON, 0);
	};

	SEMICOLON() {
	    return this.getToken(ECLParser.SEMICOLON, 0);
	};

	LESS_THAN() {
	    return this.getToken(ECLParser.LESS_THAN, 0);
	};

	EQUALS() {
	    return this.getToken(ECLParser.EQUALS, 0);
	};

	GREATER_THAN() {
	    return this.getToken(ECLParser.GREATER_THAN, 0);
	};

	QUESTION() {
	    return this.getToken(ECLParser.QUESTION, 0);
	};

	AT() {
	    return this.getToken(ECLParser.AT, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	CAP_B() {
	    return this.getToken(ECLParser.CAP_B, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	CAP_D() {
	    return this.getToken(ECLParser.CAP_D, 0);
	};

	CAP_E() {
	    return this.getToken(ECLParser.CAP_E, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	CAP_G() {
	    return this.getToken(ECLParser.CAP_G, 0);
	};

	CAP_H() {
	    return this.getToken(ECLParser.CAP_H, 0);
	};

	CAP_I() {
	    return this.getToken(ECLParser.CAP_I, 0);
	};

	CAP_J() {
	    return this.getToken(ECLParser.CAP_J, 0);
	};

	CAP_K() {
	    return this.getToken(ECLParser.CAP_K, 0);
	};

	CAP_L() {
	    return this.getToken(ECLParser.CAP_L, 0);
	};

	CAP_M() {
	    return this.getToken(ECLParser.CAP_M, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	CAP_P() {
	    return this.getToken(ECLParser.CAP_P, 0);
	};

	CAP_Q() {
	    return this.getToken(ECLParser.CAP_Q, 0);
	};

	CAP_R() {
	    return this.getToken(ECLParser.CAP_R, 0);
	};

	CAP_S() {
	    return this.getToken(ECLParser.CAP_S, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	CAP_U() {
	    return this.getToken(ECLParser.CAP_U, 0);
	};

	CAP_V() {
	    return this.getToken(ECLParser.CAP_V, 0);
	};

	CAP_W() {
	    return this.getToken(ECLParser.CAP_W, 0);
	};

	CAP_X() {
	    return this.getToken(ECLParser.CAP_X, 0);
	};

	CAP_Y() {
	    return this.getToken(ECLParser.CAP_Y, 0);
	};

	CAP_Z() {
	    return this.getToken(ECLParser.CAP_Z, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(ECLParser.LEFT_BRACE, 0);
	};

	BACKSLASH() {
	    return this.getToken(ECLParser.BACKSLASH, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(ECLParser.RIGHT_BRACE, 0);
	};

	CARAT() {
	    return this.getToken(ECLParser.CARAT, 0);
	};

	UNDERSCORE() {
	    return this.getToken(ECLParser.UNDERSCORE, 0);
	};

	ACCENT() {
	    return this.getToken(ECLParser.ACCENT, 0);
	};

	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	B() {
	    return this.getToken(ECLParser.B, 0);
	};

	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	D() {
	    return this.getToken(ECLParser.D, 0);
	};

	E() {
	    return this.getToken(ECLParser.E, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	G() {
	    return this.getToken(ECLParser.G, 0);
	};

	H() {
	    return this.getToken(ECLParser.H, 0);
	};

	I() {
	    return this.getToken(ECLParser.I, 0);
	};

	J() {
	    return this.getToken(ECLParser.J, 0);
	};

	K() {
	    return this.getToken(ECLParser.K, 0);
	};

	L() {
	    return this.getToken(ECLParser.L, 0);
	};

	M() {
	    return this.getToken(ECLParser.M, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	P() {
	    return this.getToken(ECLParser.P, 0);
	};

	Q() {
	    return this.getToken(ECLParser.Q, 0);
	};

	R() {
	    return this.getToken(ECLParser.R, 0);
	};

	S() {
	    return this.getToken(ECLParser.S, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	U() {
	    return this.getToken(ECLParser.U, 0);
	};

	V() {
	    return this.getToken(ECLParser.V, 0);
	};

	W() {
	    return this.getToken(ECLParser.W, 0);
	};

	X() {
	    return this.getToken(ECLParser.X, 0);
	};

	Y() {
	    return this.getToken(ECLParser.Y, 0);
	};

	Z() {
	    return this.getToken(ECLParser.Z, 0);
	};

	LEFT_CURLY_BRACE() {
	    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
	};

	PIPE() {
	    return this.getToken(ECLParser.PIPE, 0);
	};

	RIGHT_CURLY_BRACE() {
	    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
	};

	TILDE() {
	    return this.getToken(ECLParser.TILDE, 0);
	};

	UTF8_LETTER() {
	    return this.getToken(ECLParser.UTF8_LETTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterNonfslash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitNonfslash(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitNonfslash(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_sp;
    }

	SPACE() {
	    return this.getToken(ECLParser.SPACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterSp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitSp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitSp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HtabContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_htab;
    }

	TAB() {
	    return this.getToken(ECLParser.TAB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterHtab(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitHtab(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitHtab(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_cr;
    }

	CR() {
	    return this.getToken(ECLParser.CR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterCr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitCr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitCr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_lf;
    }

	LF() {
	    return this.getToken(ECLParser.LF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterLf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitLf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitLf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_qm;
    }

	QUOTE() {
	    return this.getToken(ECLParser.QUOTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterQm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitQm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitQm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_bs;
    }

	BACKSLASH() {
	    return this.getToken(ECLParser.BACKSLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterBs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitBs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitBs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DigitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_digit;
    }

	ZERO() {
	    return this.getToken(ECLParser.ZERO, 0);
	};

	ONE() {
	    return this.getToken(ECLParser.ONE, 0);
	};

	TWO() {
	    return this.getToken(ECLParser.TWO, 0);
	};

	THREE() {
	    return this.getToken(ECLParser.THREE, 0);
	};

	FOUR() {
	    return this.getToken(ECLParser.FOUR, 0);
	};

	FIVE() {
	    return this.getToken(ECLParser.FIVE, 0);
	};

	SIX() {
	    return this.getToken(ECLParser.SIX, 0);
	};

	SEVEN() {
	    return this.getToken(ECLParser.SEVEN, 0);
	};

	EIGHT() {
	    return this.getToken(ECLParser.EIGHT, 0);
	};

	NINE() {
	    return this.getToken(ECLParser.NINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDigit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDigit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDigit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ZeroContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_zero;
    }

	ZERO() {
	    return this.getToken(ECLParser.ZERO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterZero(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitZero(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitZero(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DigitnonzeroContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_digitnonzero;
    }

	ONE() {
	    return this.getToken(ECLParser.ONE, 0);
	};

	TWO() {
	    return this.getToken(ECLParser.TWO, 0);
	};

	THREE() {
	    return this.getToken(ECLParser.THREE, 0);
	};

	FOUR() {
	    return this.getToken(ECLParser.FOUR, 0);
	};

	FIVE() {
	    return this.getToken(ECLParser.FIVE, 0);
	};

	SIX() {
	    return this.getToken(ECLParser.SIX, 0);
	};

	SEVEN() {
	    return this.getToken(ECLParser.SEVEN, 0);
	};

	EIGHT() {
	    return this.getToken(ECLParser.EIGHT, 0);
	};

	NINE() {
	    return this.getToken(ECLParser.NINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterDigitnonzero(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitDigitnonzero(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitDigitnonzero(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonwsnonpipeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_nonwsnonpipe;
    }

	EXCLAMATION() {
	    return this.getToken(ECLParser.EXCLAMATION, 0);
	};

	QUOTE() {
	    return this.getToken(ECLParser.QUOTE, 0);
	};

	POUND() {
	    return this.getToken(ECLParser.POUND, 0);
	};

	DOLLAR() {
	    return this.getToken(ECLParser.DOLLAR, 0);
	};

	PERCENT() {
	    return this.getToken(ECLParser.PERCENT, 0);
	};

	AMPERSAND() {
	    return this.getToken(ECLParser.AMPERSAND, 0);
	};

	APOSTROPHE() {
	    return this.getToken(ECLParser.APOSTROPHE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(ECLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(ECLParser.RIGHT_PAREN, 0);
	};

	ASTERISK() {
	    return this.getToken(ECLParser.ASTERISK, 0);
	};

	PLUS() {
	    return this.getToken(ECLParser.PLUS, 0);
	};

	COMMA() {
	    return this.getToken(ECLParser.COMMA, 0);
	};

	DASH() {
	    return this.getToken(ECLParser.DASH, 0);
	};

	PERIOD() {
	    return this.getToken(ECLParser.PERIOD, 0);
	};

	SLASH() {
	    return this.getToken(ECLParser.SLASH, 0);
	};

	ZERO() {
	    return this.getToken(ECLParser.ZERO, 0);
	};

	ONE() {
	    return this.getToken(ECLParser.ONE, 0);
	};

	TWO() {
	    return this.getToken(ECLParser.TWO, 0);
	};

	THREE() {
	    return this.getToken(ECLParser.THREE, 0);
	};

	FOUR() {
	    return this.getToken(ECLParser.FOUR, 0);
	};

	FIVE() {
	    return this.getToken(ECLParser.FIVE, 0);
	};

	SIX() {
	    return this.getToken(ECLParser.SIX, 0);
	};

	SEVEN() {
	    return this.getToken(ECLParser.SEVEN, 0);
	};

	EIGHT() {
	    return this.getToken(ECLParser.EIGHT, 0);
	};

	NINE() {
	    return this.getToken(ECLParser.NINE, 0);
	};

	COLON() {
	    return this.getToken(ECLParser.COLON, 0);
	};

	SEMICOLON() {
	    return this.getToken(ECLParser.SEMICOLON, 0);
	};

	LESS_THAN() {
	    return this.getToken(ECLParser.LESS_THAN, 0);
	};

	EQUALS() {
	    return this.getToken(ECLParser.EQUALS, 0);
	};

	GREATER_THAN() {
	    return this.getToken(ECLParser.GREATER_THAN, 0);
	};

	QUESTION() {
	    return this.getToken(ECLParser.QUESTION, 0);
	};

	AT() {
	    return this.getToken(ECLParser.AT, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	CAP_B() {
	    return this.getToken(ECLParser.CAP_B, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	CAP_D() {
	    return this.getToken(ECLParser.CAP_D, 0);
	};

	CAP_E() {
	    return this.getToken(ECLParser.CAP_E, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	CAP_G() {
	    return this.getToken(ECLParser.CAP_G, 0);
	};

	CAP_H() {
	    return this.getToken(ECLParser.CAP_H, 0);
	};

	CAP_I() {
	    return this.getToken(ECLParser.CAP_I, 0);
	};

	CAP_J() {
	    return this.getToken(ECLParser.CAP_J, 0);
	};

	CAP_K() {
	    return this.getToken(ECLParser.CAP_K, 0);
	};

	CAP_L() {
	    return this.getToken(ECLParser.CAP_L, 0);
	};

	CAP_M() {
	    return this.getToken(ECLParser.CAP_M, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	CAP_P() {
	    return this.getToken(ECLParser.CAP_P, 0);
	};

	CAP_Q() {
	    return this.getToken(ECLParser.CAP_Q, 0);
	};

	CAP_R() {
	    return this.getToken(ECLParser.CAP_R, 0);
	};

	CAP_S() {
	    return this.getToken(ECLParser.CAP_S, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	CAP_U() {
	    return this.getToken(ECLParser.CAP_U, 0);
	};

	CAP_V() {
	    return this.getToken(ECLParser.CAP_V, 0);
	};

	CAP_W() {
	    return this.getToken(ECLParser.CAP_W, 0);
	};

	CAP_X() {
	    return this.getToken(ECLParser.CAP_X, 0);
	};

	CAP_Y() {
	    return this.getToken(ECLParser.CAP_Y, 0);
	};

	CAP_Z() {
	    return this.getToken(ECLParser.CAP_Z, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(ECLParser.LEFT_BRACE, 0);
	};

	BACKSLASH() {
	    return this.getToken(ECLParser.BACKSLASH, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(ECLParser.RIGHT_BRACE, 0);
	};

	CARAT() {
	    return this.getToken(ECLParser.CARAT, 0);
	};

	UNDERSCORE() {
	    return this.getToken(ECLParser.UNDERSCORE, 0);
	};

	ACCENT() {
	    return this.getToken(ECLParser.ACCENT, 0);
	};

	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	B() {
	    return this.getToken(ECLParser.B, 0);
	};

	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	D() {
	    return this.getToken(ECLParser.D, 0);
	};

	E() {
	    return this.getToken(ECLParser.E, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	G() {
	    return this.getToken(ECLParser.G, 0);
	};

	H() {
	    return this.getToken(ECLParser.H, 0);
	};

	I() {
	    return this.getToken(ECLParser.I, 0);
	};

	J() {
	    return this.getToken(ECLParser.J, 0);
	};

	K() {
	    return this.getToken(ECLParser.K, 0);
	};

	L() {
	    return this.getToken(ECLParser.L, 0);
	};

	M() {
	    return this.getToken(ECLParser.M, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	P() {
	    return this.getToken(ECLParser.P, 0);
	};

	Q() {
	    return this.getToken(ECLParser.Q, 0);
	};

	R() {
	    return this.getToken(ECLParser.R, 0);
	};

	S() {
	    return this.getToken(ECLParser.S, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	U() {
	    return this.getToken(ECLParser.U, 0);
	};

	V() {
	    return this.getToken(ECLParser.V, 0);
	};

	W() {
	    return this.getToken(ECLParser.W, 0);
	};

	X() {
	    return this.getToken(ECLParser.X, 0);
	};

	Y() {
	    return this.getToken(ECLParser.Y, 0);
	};

	Z() {
	    return this.getToken(ECLParser.Z, 0);
	};

	LEFT_CURLY_BRACE() {
	    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
	};

	RIGHT_CURLY_BRACE() {
	    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
	};

	TILDE() {
	    return this.getToken(ECLParser.TILDE, 0);
	};

	UTF8_LETTER() {
	    return this.getToken(ECLParser.UTF8_LETTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterNonwsnonpipe(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitNonwsnonpipe(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitNonwsnonpipe(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnynonescapedcharContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_anynonescapedchar;
    }

	sp() {
	    return this.getTypedRuleContext(SpContext,0);
	};

	htab() {
	    return this.getTypedRuleContext(HtabContext,0);
	};

	cr() {
	    return this.getTypedRuleContext(CrContext,0);
	};

	lf() {
	    return this.getTypedRuleContext(LfContext,0);
	};

	SPACE() {
	    return this.getToken(ECLParser.SPACE, 0);
	};

	EXCLAMATION() {
	    return this.getToken(ECLParser.EXCLAMATION, 0);
	};

	POUND() {
	    return this.getToken(ECLParser.POUND, 0);
	};

	DOLLAR() {
	    return this.getToken(ECLParser.DOLLAR, 0);
	};

	PERCENT() {
	    return this.getToken(ECLParser.PERCENT, 0);
	};

	AMPERSAND() {
	    return this.getToken(ECLParser.AMPERSAND, 0);
	};

	APOSTROPHE() {
	    return this.getToken(ECLParser.APOSTROPHE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(ECLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(ECLParser.RIGHT_PAREN, 0);
	};

	ASTERISK() {
	    return this.getToken(ECLParser.ASTERISK, 0);
	};

	PLUS() {
	    return this.getToken(ECLParser.PLUS, 0);
	};

	COMMA() {
	    return this.getToken(ECLParser.COMMA, 0);
	};

	DASH() {
	    return this.getToken(ECLParser.DASH, 0);
	};

	PERIOD() {
	    return this.getToken(ECLParser.PERIOD, 0);
	};

	SLASH() {
	    return this.getToken(ECLParser.SLASH, 0);
	};

	ZERO() {
	    return this.getToken(ECLParser.ZERO, 0);
	};

	ONE() {
	    return this.getToken(ECLParser.ONE, 0);
	};

	TWO() {
	    return this.getToken(ECLParser.TWO, 0);
	};

	THREE() {
	    return this.getToken(ECLParser.THREE, 0);
	};

	FOUR() {
	    return this.getToken(ECLParser.FOUR, 0);
	};

	FIVE() {
	    return this.getToken(ECLParser.FIVE, 0);
	};

	SIX() {
	    return this.getToken(ECLParser.SIX, 0);
	};

	SEVEN() {
	    return this.getToken(ECLParser.SEVEN, 0);
	};

	EIGHT() {
	    return this.getToken(ECLParser.EIGHT, 0);
	};

	NINE() {
	    return this.getToken(ECLParser.NINE, 0);
	};

	COLON() {
	    return this.getToken(ECLParser.COLON, 0);
	};

	SEMICOLON() {
	    return this.getToken(ECLParser.SEMICOLON, 0);
	};

	LESS_THAN() {
	    return this.getToken(ECLParser.LESS_THAN, 0);
	};

	EQUALS() {
	    return this.getToken(ECLParser.EQUALS, 0);
	};

	GREATER_THAN() {
	    return this.getToken(ECLParser.GREATER_THAN, 0);
	};

	QUESTION() {
	    return this.getToken(ECLParser.QUESTION, 0);
	};

	AT() {
	    return this.getToken(ECLParser.AT, 0);
	};

	CAP_A() {
	    return this.getToken(ECLParser.CAP_A, 0);
	};

	CAP_B() {
	    return this.getToken(ECLParser.CAP_B, 0);
	};

	CAP_C() {
	    return this.getToken(ECLParser.CAP_C, 0);
	};

	CAP_D() {
	    return this.getToken(ECLParser.CAP_D, 0);
	};

	CAP_E() {
	    return this.getToken(ECLParser.CAP_E, 0);
	};

	CAP_F() {
	    return this.getToken(ECLParser.CAP_F, 0);
	};

	CAP_G() {
	    return this.getToken(ECLParser.CAP_G, 0);
	};

	CAP_H() {
	    return this.getToken(ECLParser.CAP_H, 0);
	};

	CAP_I() {
	    return this.getToken(ECLParser.CAP_I, 0);
	};

	CAP_J() {
	    return this.getToken(ECLParser.CAP_J, 0);
	};

	CAP_K() {
	    return this.getToken(ECLParser.CAP_K, 0);
	};

	CAP_L() {
	    return this.getToken(ECLParser.CAP_L, 0);
	};

	CAP_M() {
	    return this.getToken(ECLParser.CAP_M, 0);
	};

	CAP_N() {
	    return this.getToken(ECLParser.CAP_N, 0);
	};

	CAP_O() {
	    return this.getToken(ECLParser.CAP_O, 0);
	};

	CAP_P() {
	    return this.getToken(ECLParser.CAP_P, 0);
	};

	CAP_Q() {
	    return this.getToken(ECLParser.CAP_Q, 0);
	};

	CAP_R() {
	    return this.getToken(ECLParser.CAP_R, 0);
	};

	CAP_S() {
	    return this.getToken(ECLParser.CAP_S, 0);
	};

	CAP_T() {
	    return this.getToken(ECLParser.CAP_T, 0);
	};

	CAP_U() {
	    return this.getToken(ECLParser.CAP_U, 0);
	};

	CAP_V() {
	    return this.getToken(ECLParser.CAP_V, 0);
	};

	CAP_W() {
	    return this.getToken(ECLParser.CAP_W, 0);
	};

	CAP_X() {
	    return this.getToken(ECLParser.CAP_X, 0);
	};

	CAP_Y() {
	    return this.getToken(ECLParser.CAP_Y, 0);
	};

	CAP_Z() {
	    return this.getToken(ECLParser.CAP_Z, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(ECLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(ECLParser.RIGHT_BRACE, 0);
	};

	CARAT() {
	    return this.getToken(ECLParser.CARAT, 0);
	};

	UNDERSCORE() {
	    return this.getToken(ECLParser.UNDERSCORE, 0);
	};

	ACCENT() {
	    return this.getToken(ECLParser.ACCENT, 0);
	};

	A() {
	    return this.getToken(ECLParser.A, 0);
	};

	B() {
	    return this.getToken(ECLParser.B, 0);
	};

	C() {
	    return this.getToken(ECLParser.C, 0);
	};

	D() {
	    return this.getToken(ECLParser.D, 0);
	};

	E() {
	    return this.getToken(ECLParser.E, 0);
	};

	F() {
	    return this.getToken(ECLParser.F, 0);
	};

	G() {
	    return this.getToken(ECLParser.G, 0);
	};

	H() {
	    return this.getToken(ECLParser.H, 0);
	};

	I() {
	    return this.getToken(ECLParser.I, 0);
	};

	J() {
	    return this.getToken(ECLParser.J, 0);
	};

	K() {
	    return this.getToken(ECLParser.K, 0);
	};

	L() {
	    return this.getToken(ECLParser.L, 0);
	};

	M() {
	    return this.getToken(ECLParser.M, 0);
	};

	N() {
	    return this.getToken(ECLParser.N, 0);
	};

	O() {
	    return this.getToken(ECLParser.O, 0);
	};

	P() {
	    return this.getToken(ECLParser.P, 0);
	};

	Q() {
	    return this.getToken(ECLParser.Q, 0);
	};

	R() {
	    return this.getToken(ECLParser.R, 0);
	};

	S() {
	    return this.getToken(ECLParser.S, 0);
	};

	T() {
	    return this.getToken(ECLParser.T, 0);
	};

	U() {
	    return this.getToken(ECLParser.U, 0);
	};

	V() {
	    return this.getToken(ECLParser.V, 0);
	};

	W() {
	    return this.getToken(ECLParser.W, 0);
	};

	X() {
	    return this.getToken(ECLParser.X, 0);
	};

	Y() {
	    return this.getToken(ECLParser.Y, 0);
	};

	Z() {
	    return this.getToken(ECLParser.Z, 0);
	};

	LEFT_CURLY_BRACE() {
	    return this.getToken(ECLParser.LEFT_CURLY_BRACE, 0);
	};

	PIPE() {
	    return this.getToken(ECLParser.PIPE, 0);
	};

	RIGHT_CURLY_BRACE() {
	    return this.getToken(ECLParser.RIGHT_CURLY_BRACE, 0);
	};

	TILDE() {
	    return this.getToken(ECLParser.TILDE, 0);
	};

	UTF8_LETTER() {
	    return this.getToken(ECLParser.UTF8_LETTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterAnynonescapedchar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitAnynonescapedchar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitAnynonescapedchar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EscapedcharContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ECLParser.RULE_escapedchar;
    }

	bs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BsContext);
	    } else {
	        return this.getTypedRuleContext(BsContext,i);
	    }
	};

	qm() {
	    return this.getTypedRuleContext(QmContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.enterEscapedchar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ECLListener ) {
	        listener.exitEscapedchar(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ECLVisitor ) {
	        return visitor.visitEscapedchar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




ECLParser.EclContext = EclContext; 
ECLParser.ExpressionconstraintContext = ExpressionconstraintContext; 
ECLParser.RefinedexpressionconstraintContext = RefinedexpressionconstraintContext; 
ECLParser.CompoundexpressionconstraintContext = CompoundexpressionconstraintContext; 
ECLParser.ConjunctionexpressionconstraintContext = ConjunctionexpressionconstraintContext; 
ECLParser.DisjunctionexpressionconstraintContext = DisjunctionexpressionconstraintContext; 
ECLParser.ExclusionexpressionconstraintContext = ExclusionexpressionconstraintContext; 
ECLParser.BracketcompoundexpressionconstraintContext = BracketcompoundexpressionconstraintContext; 
ECLParser.DottedexpressionconstraintContext = DottedexpressionconstraintContext; 
ECLParser.DottedexpressionattributeContext = DottedexpressionattributeContext; 
ECLParser.SubexpressionconstraintContext = SubexpressionconstraintContext; 
ECLParser.EclfocusconceptContext = EclfocusconceptContext; 
ECLParser.DotContext = DotContext; 
ECLParser.MemberofContext = MemberofContext; 
ECLParser.EclconceptreferenceContext = EclconceptreferenceContext; 
ECLParser.ConceptidContext = ConceptidContext; 
ECLParser.TermContext = TermContext; 
ECLParser.WildcardContext = WildcardContext; 
ECLParser.ConstraintoperatorContext = ConstraintoperatorContext; 
ECLParser.DescendantofContext = DescendantofContext; 
ECLParser.DescendantorselfofContext = DescendantorselfofContext; 
ECLParser.ChildofContext = ChildofContext; 
ECLParser.AncestorofContext = AncestorofContext; 
ECLParser.AncestororselfofContext = AncestororselfofContext; 
ECLParser.ParentofContext = ParentofContext; 
ECLParser.ConjunctionContext = ConjunctionContext; 
ECLParser.DisjunctionContext = DisjunctionContext; 
ECLParser.ExclusionContext = ExclusionContext; 
ECLParser.EclrefinementContext = EclrefinementContext; 
ECLParser.CompoundrefinementsetContext = CompoundrefinementsetContext; 
ECLParser.ConjunctionrefinementsetContext = ConjunctionrefinementsetContext; 
ECLParser.DisjunctionrefinementsetContext = DisjunctionrefinementsetContext; 
ECLParser.BracketcompoundrefinementsetContext = BracketcompoundrefinementsetContext; 
ECLParser.SubrefinementContext = SubrefinementContext; 
ECLParser.BracketsubrefinementContext = BracketsubrefinementContext; 
ECLParser.CompoundattributesetContext = CompoundattributesetContext; 
ECLParser.ConjunctionattributesetContext = ConjunctionattributesetContext; 
ECLParser.DisjunctionattributesetContext = DisjunctionattributesetContext; 
ECLParser.BracketattributesetContext = BracketattributesetContext; 
ECLParser.SubattributesetContext = SubattributesetContext; 
ECLParser.EclattributegroupContext = EclattributegroupContext; 
ECLParser.EclattributeContext = EclattributeContext; 
ECLParser.EclattributestringvalueContext = EclattributestringvalueContext; 
ECLParser.EclattributenumbervalueContext = EclattributenumbervalueContext; 
ECLParser.EclattributeexpressionvalueContext = EclattributeexpressionvalueContext; 
ECLParser.CardinalityContext = CardinalityContext; 
ECLParser.MinvalueContext = MinvalueContext; 
ECLParser.ToContext = ToContext; 
ECLParser.MaxvalueContext = MaxvalueContext; 
ECLParser.ManyContext = ManyContext; 
ECLParser.ReverseflagContext = ReverseflagContext; 
ECLParser.ExpressioncomparisonoperatorContext = ExpressioncomparisonoperatorContext; 
ECLParser.NumericcomparisonoperatorContext = NumericcomparisonoperatorContext; 
ECLParser.StringcomparisonoperatorContext = StringcomparisonoperatorContext; 
ECLParser.NumericvalueContext = NumericvalueContext; 
ECLParser.StringvalueContext = StringvalueContext; 
ECLParser.IntegervalueContext = IntegervalueContext; 
ECLParser.DecimalvalueContext = DecimalvalueContext; 
ECLParser.NonnegativeintegervalueContext = NonnegativeintegervalueContext; 
ECLParser.SctidContext = SctidContext; 
ECLParser.WsContext = WsContext; 
ECLParser.MwsContext = MwsContext; 
ECLParser.CommentContext = CommentContext; 
ECLParser.NonstarcharContext = NonstarcharContext; 
ECLParser.NonspacecharContext = NonspacecharContext; 
ECLParser.StarwithnonfslashContext = StarwithnonfslashContext; 
ECLParser.NonfslashContext = NonfslashContext; 
ECLParser.SpContext = SpContext; 
ECLParser.HtabContext = HtabContext; 
ECLParser.CrContext = CrContext; 
ECLParser.LfContext = LfContext; 
ECLParser.QmContext = QmContext; 
ECLParser.BsContext = BsContext; 
ECLParser.DigitContext = DigitContext; 
ECLParser.ZeroContext = ZeroContext; 
ECLParser.DigitnonzeroContext = DigitnonzeroContext; 
ECLParser.NonwsnonpipeContext = NonwsnonpipeContext; 
ECLParser.AnynonescapedcharContext = AnynonescapedcharContext; 
ECLParser.EscapedcharContext = EscapedcharContext; 
